<?xml version="1.0" encoding="utf-8"?>
<samples:AbsSample xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"
	xmlns:samples="samples.*">
	<mx:Script>
		<![CDATA[
			import mx.containers.Panel;
			import rx.CompositeCancelable;
			import rx.IObserver;
			import mx.events.FlexEvent;
			import rx.ICancelable;
			import rx.IObservable;
			import rx.Observable;
			
			private var innerRect : Panel = new Panel();
			private var subscription : ICancelable;
			
			public override function setup() : void
			{
				// Filter mouse movement events so that they are ignored within the top 50x50 box
				var md : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_DOWN);
				var mm : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_MOVE);					
				var mu : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_UP);
				
				trackContainer.graphics.lineStyle(3, 0xFF0000, 1);
				
				innerRect.graphics.lineStyle(1, 0x00FF00, 1);
	            innerRect.graphics.beginFill(0xFFFFFF);
	            innerRect.graphics.drawRect(10, 10, 200, 200);
	            innerRect.graphics.endFill();
	            trackContainer.addChild(innerRect);
	            
				subscription = new CompositeCancelable([
					drawOn(trackContainer),
					drawOn(innerRect)
				]);
			}
			
			private function drawOn(sprite : Sprite) : ICancelable
			{
				var md : IObservable = Observable.fromEvent(sprite, MouseEvent.MOUSE_DOWN);
				var mm : IObservable = Observable.fromEvent(sprite, MouseEvent.MOUSE_MOVE);					
				var mu : IObservable = Observable.fromEvent(sprite, MouseEvent.MOUSE_UP);
				
				return md
					.doAction(function(ev:MouseEvent):void
					{
						sprite.graphics.moveTo(ev.localX, ev.localY);
					})
					.selectMany(MouseEvent, function(pl:MouseEvent):IObservable { return mm.takeUntil(mu); })
					.subscribe(function(ev:MouseEvent):void
					{
						sprite.graphics.lineTo(ev.localX, ev.localY);
					});
			}
			
			public override function teardown() : void
			{
				trackContainer.graphics.clear();
				innerRect.graphics.clear();
				
				trackContainer.removeChild(innerRect);
				
				if (subscription != null)
				{
					subscription.cancel();
				}
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:Canvas width="100%" height="100%" borderColor="#000000" id="trackContainer">
		</mx:Canvas>
		<mx:Box height="80%" width="100%" visible="{showCode}" includeInLayout="{showCode}">
			<mx:TextArea height="100%" width="100%" fontFamily="Courier New">
				<mx:htmlText>
	<![CDATA[
// Filter mouse movement events so that they are ignored within the top 50x50 box
var md : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_DOWN);
var mm : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_MOVE);					
var mu : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_UP);

var x : IObservable = mm.select(function(me:MouseEvent):int { return me.localX; });

var obs : IObservable = md
	.selectMany(function(pl:MouseEvent):IObservable { return mm.takeUntil(mu); });

subscription = obs.subscribeFunc(function(me : MouseEvent) : void
{
	var pnt : Point = trackContainer.globalToLocal(new Point(me.stageX, me.stageY));

	moveBox.x = pnt.x;
	moveBox.y = pnt.y;
});
]]>
				</mx:htmlText>
			</mx:TextArea>
		</mx:Box>
	</mx:VBox>
	
	
</samples:AbsSample>
