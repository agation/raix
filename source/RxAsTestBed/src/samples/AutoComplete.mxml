<?xml version="1.0" encoding="utf-8"?>
<samples:AbsSample xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"
	xmlns:samples="samples.*">
	<mx:Script>
		<![CDATA[
			import samples.imageSearch.JsonService;
			import rx.IObserver;
			import mx.events.FlexEvent;
			import rx.ICancelable;
			import rx.IObservable;
			import rx.Observable;
			
			private var subscription : ICancelable;
			
			private var jsonService : JsonService = new JsonService();
			
			private static const SEARCH_URL : String = "http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=";
			
			public override function setup() : void
			{
				var keyDownObservable : IObservable = 
					Observable.fromEvent(textInput, KeyboardEvent.KEY_UP);
					
				var searchObservable : IObservable = keyDownObservable
					.select(String, function(e:Event):String { return textInput.text; })
					.throttle(250)
					.selectMany(Object, function(input:String) : IObservable
					{
						var urlRequest : URLRequest = new URLRequest(SEARCH_URL + input);
						return jsonService.getObservable(urlRequest);
					})
					.select(String, function(data:Object) : Array
					{
						return data.responseData.results
							.map(function(v:Object,...args):String { return v.titleNoFormatting; });
					});
					
				subscription = searchObservable.subscribeFunc(
					function(values:Array) : void 
					{
						autoComplete.dataProvider = values;
					});
			}
			
			public override function teardown() : void
			{
				if (subscription != null)
				{
					subscription.cancel();
				}
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:VBox width="100%" height="100%" borderColor="#000000" id="trackContainer">
			<mx:TextInput id="textInput" />
			<mx:List id="autoComplete" visible="{autoComplete.dataProvider != null}" includeInLayout="false" />
		</mx:VBox>
		<mx:Box height="80%" width="100%" visible="{showCode}" includeInLayout="{showCode}">
			<mx:TextArea height="100%" width="100%" fontFamily="Courier New">
				<mx:htmlText>
	<![CDATA[
// Filter mouse movement events so that they are ignored within the top 50x50 box
var md : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_DOWN);
var mm : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_MOVE);					
var mu : IObservable = Observable.fromEvent(trackContainer, MouseEvent.MOUSE_UP);

var x : IObservable = mm.select(function(me:MouseEvent):int { return me.localX; });

var obs : IObservable = md
	.selectMany(function(pl:MouseEvent):IObservable { return mm.takeUntil(mu); });

subscription = obs.subscribeFunc(function(me : MouseEvent) : void
{
	var pnt : Point = trackContainer.globalToLocal(new Point(me.stageX, me.stageY));

	moveBox.x = pnt.x;
	moveBox.y = pnt.y;
});
]]>
				</mx:htmlText>
			</mx:TextArea>
		</mx:Box>
	</mx:VBox>
	
	
</samples:AbsSample>
