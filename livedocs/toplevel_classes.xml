<asdoc build="asd3_0_b2_1">
   <link rel="stylesheet" href="style.css" type="text/css"/>
   <packages>
      <asPackage name="rx.internal">
         <classes>
            <asClass name="ErrorUtil" type="class" fullname="rx.internal:ErrorUtil" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.internal" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="ErrorUtil" fullname="rx.internal:ErrorUtil/ErrorUtil" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="mapErrorEvent" fullname="rx.internal:ErrorUtil/mapErrorEvent" accessLevel="public" result_type="Error" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <versions/>
                     <result type="Error"/>
                     <params>
                        <param name="errorEvent" type="flash.events:ErrorEvent"/>
                     </params>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="rx">
         <classes>
            <asClass name="ICancelable" type="interface" fullname="rx:ICancelable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Represents a handle that can be used to cancel an operation 
  
  ]]></description>
               <shortDescription><![CDATA[
  Represents a handle that can be used to cancel an operation 
  
  ]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="" label="rx.BooleanCancelable, rx.FutureCancelable, rx.Cancelable"/>
               </sees>
               <implementers>
                  <classRef name="FutureCancelable" fullName="rx:FutureCancelable" packageName="rx" relativePath="rx/FutureCancelable.html"/>
                  <classRef name="BooleanCancelable" fullName="rx:BooleanCancelable" packageName="rx" relativePath="rx/BooleanCancelable.html"/>
                  <classRef name="CompositeCancelable" fullName="rx:CompositeCancelable" packageName="rx" relativePath="rx/CompositeCancelable.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="cancel" fullname="rx:ICancelable/rx:ICancelable:cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Cancels the operation
   ]]></description>
                     <shortDescription><![CDATA[
   Cancels the operation
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
            </asClass>
            <asClass name="Unit" type="class" fullname="rx:Unit" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Represents a valueClass that can be used when 
  an observable sequence logically has no valueClass
  ]]></description>
               <shortDescription><![CDATA[
  Represents a valueClass that can be used when 
  an observable sequence logically has no valueClass
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Unit" fullname="rx:Unit/Unit" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
            </asClass>
            <asClass name="NotificationKind" type="class" fullname="rx:NotificationKind" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Enumeration for the different types of Notification
  ]]></description>
               <shortDescription><![CDATA[
  Enumeration for the different types of Notification
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <fields>
                  <field name="ON_COMPLETED" fullname="rx:NotificationKind/ON_COMPLETED" accessLevel="public" type="int" isConst="true" isStatic="true" defaultValue="2">
                     <description><![CDATA[
   An onCompleted message
   
   ]]></description>
                     <shortDescription><![CDATA[
   An onCompleted message
   
   ]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="rx/OnCompleted.html" label="rx.OnCompleted"/>
                     </sees>
                  </field>
                  <field name="ON_ERROR" fullname="rx:NotificationKind/ON_ERROR" accessLevel="public" type="int" isConst="true" isStatic="true" defaultValue="1">
                     <description><![CDATA[
   An onError message
   
   ]]></description>
                     <shortDescription><![CDATA[
   An onError message
   
   ]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="rx/OnError.html" label="rx.OnError"/>
                     </sees>
                  </field>
                  <field name="ON_NEXT" fullname="rx:NotificationKind/ON_NEXT" accessLevel="public" type="int" isConst="true" isStatic="true" defaultValue="0">
                     <description><![CDATA[
   An onNext (value) message
   
   ]]></description>
                     <shortDescription><![CDATA[
   An onNext (value) message
   
   ]]></shortDescription>
                     <versions/>
                     <sees>
                        <see href="rx/OnNext.html" label="rx.OnNext"/>
                     </sees>
                  </field>
               </fields>
            </asClass>
            <asClass name="Subject" type="class" fullname="rx:Subject" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A Subject is both an IObservable and an IObserver, so it can be 
  returned as an IObservable and fed values through the IObserver 
  methods.
  
  <p>When returning a Subject as an IObservable, it's recommended that you
  return subject.asObservable() to hide the original instance</p>
  ]]></description>
               <shortDescription><![CDATA[
  A Subject is both an IObservable and an IObserver, so it can be 
  returned as an IObservable and fed values through the IObserver 
  methods.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="AbsObservable" fullName="rx:AbsObservable" packageName="rx" relativePath="AbsObservable.html"/>
                     <methods>
                        <method name="aggregate" fullname="rx:AbsObservable/aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:AbsObservable/all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:AbsObservable/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:AbsObservable/any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:AbsObservable/asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:AbsObservable/average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:AbsObservable/bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:AbsObservable/bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:AbsObservable/cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:AbsObservable/catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:AbsObservable/catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:AbsObservable/combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:AbsObservable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:AbsObservable/contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:AbsObservable/count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:AbsObservable/delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="delayUntil" fullname="rx:AbsObservable/delayUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dt" type="Date"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:AbsObservable/dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:AbsObservable/distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:AbsObservable/doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="nextAction" type="Function"/>
                              <param name="completeAction" type="Function" default="null"/>
                              <param name="errorAction" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:AbsObservable/finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:AbsObservable/first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:AbsObservable/firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:AbsObservable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:AbsObservable/last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:AbsObservable/lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:AbsObservable/let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:AbsObservable/materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:AbsObservable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:AbsObservable/observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:AbsObservable/ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:AbsObservable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:AbsObservable/prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:AbsObservable/pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:AbsObservable/publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:AbsObservable/publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:AbsObservable/removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:AbsObservable/removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:AbsObservable/repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:AbsObservable/replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:AbsObservable/replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:AbsObservable/retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:AbsObservable/sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:AbsObservable/scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:AbsObservable/select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:AbsObservable/selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:AbsObservable/single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:AbsObservable/singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:AbsObservable/skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:AbsObservable/skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:AbsObservable/skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:AbsObservable/skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:AbsObservable/startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="values" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:AbsObservable/subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:AbsObservable/subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:AbsObservable/sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:AbsObservable/take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:AbsObservable/takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:AbsObservable/takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:AbsObservable/takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:AbsObservable/throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:AbsObservable/timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:AbsObservable/timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:AbsObservable/timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:AbsObservable/where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:AbsObservable/zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="ISubject" fullName="rx:ISubject" packageName="rx" relativePath="ISubject.html"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="Subject" fullname="rx:Subject/Subject" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="Class"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="onCompleted" fullname="rx:Subject/onCompleted" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></description>
                     <shortDescription><![CDATA[
   
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onError" fullname="rx:Subject/onError" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></description>
                     <shortDescription><![CDATA[
   
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="error" type="Error"/>
                     </params>
                  </method>
                  <method name="onNext" fullname="rx:Subject/onNext" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Notifies the subscriber that a value has been received
   ]]></description>
                     <shortDescription><![CDATA[
   
   Notifies the subscriber that a value has been received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="pl" type="Object"/>
                     </params>
                  </method>
                  <method name="subscribeWith" fullname="rx:Subject/subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling unsubscribe() 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="IObserver.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="hasSubscriptions" fullname="rx:Subject/hasSubscriptions/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Determines whether this subject has any subscriptions
   ]]></description>
                     <shortDescription><![CDATA[
   Determines whether this subject has any subscriptions
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="subscriptionCount" fullname="rx:Subject/subscriptionCount/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the number of subscriptions this subject has
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the number of subscriptions this subject has
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="valueClass" fullname="rx:Subject/valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   
   The class of the values emitted by this observable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="TimeInterval" type="class" fullname="rx:TimeInterval" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A wrapper that adds the time interval, in milliseconds,
  since the last values 
  ]]></description>
               <shortDescription><![CDATA[
  A wrapper that adds the time interval, in milliseconds,
  since the last values 
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="TimeInterval" fullname="rx:TimeInterval/TimeInterval" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="value" type="Object"/>
                        <param name="interval" type="Number"/>
                     </params>
                  </constructor>
               </constructors>
               <fields>
                  <field name="interval" fullname="rx:TimeInterval/interval/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the internal, in milliseconds, 
   since the last value
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the internal, in milliseconds, 
   since the last value
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="value" fullname="rx:TimeInterval/value/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the original value
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the original value
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="OnNext" type="class" fullname="rx:OnNext" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A Notification for an onNext call
  ]]></description>
               <shortDescription><![CDATA[
  A Notification for an onNext call
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="Notification" fullName="rx:Notification" packageName="rx" relativePath="Notification.html"/>
                     <methods>
                        <method name="acceptWith" fullname="rx:Notification/acceptWith" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Calls the appropriate method on an observer
   ]]></shortDescription>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="OnNext" fullname="rx:OnNext/OnNext" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="value" type="Object"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="accept" fullname="rx:OnNext/accept" accessLevel="public" result_type="void" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Calls onNext if it's not null
   ]]></description>
                     <shortDescription><![CDATA[
   Calls onNext if it's not null
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="onNext" type="Function"/>
                        <param name="onCompleted" type="Function" default="null"/>
                        <param name="onError" type="Function" default="null"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="error" fullname="rx:OnNext/error/get" accessLevel="public" isConst="false" isStatic="false" type="Error" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns false since no errors are associated with values 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns false since no errors are associated with values 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="hasValue" fullname="rx:OnNext/hasValue/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns true 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns true 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="kind" fullname="rx:OnNext/kind/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns NotificationKind.ON_NEXT 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns NotificationKind.ON_NEXT 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="value" fullname="rx:OnNext/value/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the value from the message 
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the value from the message 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="AbsObservable" type="class" fullname="rx:AbsObservable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Subclass this class only if you want to implement a completely custom IObservable.
  
  <p>If you can avoid it, however, try to stick to subclassing Subject or using 
  one of the creation methods.</p>
  
  <p>This class may be made inaccessible in future revisions</p>
  ]]></description>
               <shortDescription><![CDATA[
  Subclass this class only if you want to implement a completely custom IObservable.]]></shortDescription>
               <versions/>
               <author/>
               <asDecendants>
                  <classRef name="Subject" fullName="rx:Subject" packageName="rx" relativePath="rx/Subject.html"/>
                  <classRef name="ReplaySubject" fullName="rx.subjects:ReplaySubject" packageName="rx.subjects" relativePath="subjects/ReplaySubject.html"/>
                  <classRef name="ConnectableObservable" fullName="rx.subjects:ConnectableObservable" packageName="rx.subjects" relativePath="subjects/ConnectableObservable.html"/>
                  <classRef name="ObservableResponder" fullName="rx.flex:ObservableResponder" packageName="rx.flex" relativePath="flex/ObservableResponder.html"/>
                  <classRef name="AsyncSubject" fullName="rx.subjects:AsyncSubject" packageName="rx.subjects" relativePath="subjects/AsyncSubject.html"/>
               </asDecendants>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                     <methods>
                        <method name="aggregate" fullname="rx:IObservable/rx:IObservable:aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:IObservable/rx:IObservable:all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:IObservable/rx:IObservable:and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:IObservable/rx:IObservable:any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:IObservable/rx:IObservable:asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:IObservable/rx:IObservable:average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:IObservable/rx:IObservable:bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:IObservable/rx:IObservable:bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:IObservable/rx:IObservable:cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:IObservable/rx:IObservable:catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:IObservable/rx:IObservable:catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:IObservable/rx:IObservable:combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="returnClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:IObservable/rx:IObservable:concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:IObservable/rx:IObservable:contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:IObservable/rx:IObservable:count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:IObservable/rx:IObservable:delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:IObservable/rx:IObservable:dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:IObservable/rx:IObservable:distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:IObservable/rx:IObservable:doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="next" type="Function"/>
                              <param name="complete" type="Function" default="null"/>
                              <param name="error" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:IObservable/rx:IObservable:finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="finallyAction" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:IObservable/rx:IObservable:first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:IObservable/rx:IObservable:firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:IObservable/rx:IObservable:forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:IObservable/rx:IObservable:last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:IObservable/rx:IObservable:lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:IObservable/rx:IObservable:let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:IObservable/rx:IObservable:materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:IObservable/rx:IObservable:merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:IObservable/rx:IObservable:observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:IObservable/rx:IObservable:ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:IObservable/rx:IObservable:onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:IObservable/rx:IObservable:prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:IObservable/rx:IObservable:pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:IObservable/rx:IObservable:publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:IObservable/rx:IObservable:publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:IObservable/rx:IObservable:removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:IObservable/rx:IObservable:removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:IObservable/rx:IObservable:repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:IObservable/rx:IObservable:replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:IObservable/rx:IObservable:replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:IObservable/rx:IObservable:retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:IObservable/rx:IObservable:sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:IObservable/rx:IObservable:scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:IObservable/rx:IObservable:select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:IObservable/rx:IObservable:selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:IObservable/rx:IObservable:single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:IObservable/rx:IObservable:singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:IObservable/rx:IObservable:skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:IObservable/rx:IObservable:skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:IObservable/rx:IObservable:skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:IObservable/rx:IObservable:skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:IObservable/rx:IObservable:startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:IObservable/rx:IObservable:subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:IObservable/rx:IObservable:subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribeWith" fullname="rx:IObservable/rx:IObservable:subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:IObservable/rx:IObservable:sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:IObservable/rx:IObservable:take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:IObservable/rx:IObservable:takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:IObservable/rx:IObservable:takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:IObservable/rx:IObservable:takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:IObservable/rx:IObservable:throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:IObservable/rx:IObservable:timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:IObservable/rx:IObservable:timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:IObservable/rx:IObservable:timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:IObservable/rx:IObservable:where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:IObservable/rx:IObservable:zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="AbsObservable" fullname="rx:AbsObservable/AbsObservable" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="aggregate" fullname="rx:AbsObservable/aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass (or this instance's valueClass if valueClass is null)
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="accumulator" type="Function">
                           <description><![CDATA[A function that accumulates the aggregate value
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The class of the values returned by accumulator
   ]]></description>
                        </param>
                        <param name="initialValue" type="Object" default="null">
                           <description><![CDATA[The value to start with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="all" fullname="rx:AbsObservable/all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Boolean
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The predicate that determines if a value in the sequence is valid. If null, the value will be evaulated to boolean. 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="and" fullname="rx:AbsObservable/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
    
   Creates a pattern by combining the current source with right.
   
   <p><a href="http://wiki.github.com/richardszalay/rxas/and">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
    
   Creates a pattern by combining the current source with right.]]></shortDescription>
                     <versions/>
                     <result type="rx:Pattern">
                        <![CDATA[A pattern representing both sequences
   ]]>
                        <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="rx/Pattern.html"/>
                     </result>
                     <params>
                        <param name="right" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequence to combine with the pattern.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="any" fullname="rx:AbsObservable/any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></description>
                     <shortDescription><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Boolean
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function" default="null">
                           <description><![CDATA[The predicate that determines if a value in the sequence is valid. If null, the value will be evaulated to boolean. 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="asObservable" fullname="rx:AbsObservable/asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="average" fullname="rx:AbsObservable/average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence (which should be numeric)
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="bufferWithCount" fullname="rx:AbsObservable/bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to buffer
   ]]></description>
                        </param>
                        <param name="skip" type="uint" default="0">
                           <description><![CDATA[The number of values to offset after the buffer is emitted.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="bufferWithTime" fullname="rx:AbsObservable/bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="timeMs" type="uint">
                           <description><![CDATA[The amount of time to buffer before the values are released
   ]]></description>
                        </param>
                        <param name="timeShiftMs" type="uint" default="0">
                           <description><![CDATA[The amount of time to offset after the buffer is emitted
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="cast" fullname="rx:AbsObservable/cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the output sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="catchError" fullname="rx:AbsObservable/catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="second" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to when an error occurs
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="catchErrorDefer" fullname="rx:AbsObservable/catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="errorClass" type="Class">
                           <description><![CDATA[The class (and superclass) of error to act on
   ]]></description>
                        </param>
                        <param name="deferFunc" type="Function">
                           <description><![CDATA[The function to execute in the event of an error. Signature is <code>function(e : Error) : IObservable</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="combineLatest" fullname="rx:AbsObservable/combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of returnType 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the values returned by selector
   ]]></description>
                        </param>
                        <param name="right" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to combine with
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function that combines values from the two sources. Signature is <code>function(left : this.valueClass, right : right.valueClass) : returnType</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="concat" fullname="rx:AbsObservable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="Array">
                           <description><![CDATA[The sequences to concatonate after the current sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="contains" fullname="rx:AbsObservable/contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Boolean
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="value" type="Object">
                           <description><![CDATA[The value to check against the sequence
   ]]></description>
                        </param>
                        <param name="comparer" type="Function" default="null">
                           <description><![CDATA[The function used to compare values. Default equality will be used if comparer is null.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="count" fullname="rx:AbsObservable/count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of int
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="delay" fullname="rx:AbsObservable/delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="delayMs" type="uint">
                           <description><![CDATA[The amount of time, in milliseconds, to delay
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to delay the values
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="delayUntil" fullname="rx:AbsObservable/delayUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="dt" type="Date"/>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="dematerialize" fullname="rx:AbsObservable/dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the original values 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="distinctUntilChanged" fullname="rx:AbsObservable/distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="comparer" type="Function" default="null">
                           <description><![CDATA[The function used to compare values. Default equality will be used if comparer is null.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="doAction" fullname="rx:AbsObservable/doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="nextAction" type="Function">
                           <description><![CDATA[The function to execute in the event of a value (onNext)
   ]]></description>
                        </param>
                        <param name="completeAction" type="Function" default="null">
                           <description><![CDATA[The function to execute in the event the sequence completes (onComplete)
   ]]></description>
                        </param>
                        <param name="errorAction" type="Function" default="null">
                           <description><![CDATA[The function to execute in the event of an error (onError)
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="finallyAction" fullname="rx:AbsObservable/finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to execute in the event the sequence completes or errors
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="first" fullname="rx:AbsObservable/first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="firstOrDefault" fullname="rx:AbsObservable/firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="forkJoin" fullname="rx:AbsObservable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass resultClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="resultClass" type="Class">
                           <description><![CDATA[The class of the valueClass returned by selector
   ]]></description>
                        </param>
                        <param name="right" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to, along with the current sequence
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function that accepts the last values of both sequences and returns the output value 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="last" fullname="rx:AbsObservable/last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="lastOrDefault" fullname="rx:AbsObservable/lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="let" fullname="rx:AbsObservable/let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[The observable sequence returned by func 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="func" type="Function">
                           <description><![CDATA[The function to send the current sequence through, and return a new sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="materialize" fullname="rx:AbsObservable/materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of rx.Notification
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="merge" fullname="rx:AbsObservable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequences from which the values will be merged with the current sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="observeOn" fullname="rx:AbsObservable/observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The subscriber to send messages to subscribers through
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="ofClass" fullname="rx:AbsObservable/ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class (or subsclass) of all values to emit 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="onErrorResumeNext" fullname="rx:AbsObservable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="second" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to run after the current sequence completes or errors
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use to subscribe to the new sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="prune" fullname="rx:AbsObservable/prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx.subjects:IConnectableObservable">
                        <![CDATA[A connectable observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="pruneAndConnect" fullname="rx:AbsObservable/pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to map the connected sequence through
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="publish" fullname="rx:AbsObservable/publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx.subjects:IConnectableObservable">
                        <![CDATA[A connectable observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                     </result>
                  </method>
                  <method name="publishAndConnect" fullname="rx:AbsObservable/publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></description>
                     <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to map the connected sequence through
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeTimeInterval" fullname="rx:AbsObservable/removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the original values
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeTimestamp" fullname="rx:AbsObservable/removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the original values
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="repeat" fullname="rx:AbsObservable/repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="repeatCount" type="uint" default="0">
                           <description><![CDATA[The number of times to repeat the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="replay" fullname="rx:AbsObservable/replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx.subjects:IConnectableObservable">
                        <![CDATA[A connectable observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                     </result>
                     <params>
                        <param name="bufferSize" type="uint" default="0">
                           <description><![CDATA[The number of values at the end of the sequence to replay, or 0 for all.
   ]]></description>
                        </param>
                        <param name="window" type="uint" default="0">
                           <description><![CDATA[The window of time, in milliseconds, in which to replay values from the end of the sequence, or 0 for all.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="replayAndConnect" fullname="rx:AbsObservable/replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></description>
                     <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to map the connected sequence through 
   ]]></description>
                        </param>
                        <param name="bufferSize" type="uint" default="0">
                           <description><![CDATA[The number of values at the end of the sequence to replay, or 0 for all.
   ]]></description>
                        </param>
                        <param name="window" type="uint" default="0">
                           <description><![CDATA[The window of time, in milliseconds, in which to replay values from the end of the sequence, or 0 for all.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="retry" fullname="rx:AbsObservable/retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="retryCount" type="uint" default="0">
                           <description><![CDATA[The number of times to retry the sequence in the event of an error
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="sample" fullname="rx:AbsObservable/sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="intervalMs" type="uint">
                           <description><![CDATA[The interval of time, in milliseconds, to sample the current value after
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="scan" fullname="rx:AbsObservable/scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="accumulator" type="Function">
                           <description><![CDATA[The function that accumulates values
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The class of the returned sequence and return value of accumulator
   ]]></description>
                        </param>
                        <param name="initialValue" type="Object" default="null">
                           <description><![CDATA[The value to start with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="select" fullname="rx:AbsObservable/select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass result
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the returned sequence and return value of accumulator 
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to be executed with each value
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="selectMany" fullname="rx:AbsObservable/selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></description>
                     <shortDescription><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass result
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the sequences returned by selector
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to be executed with each value
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="single" fullname="rx:AbsObservable/single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted. 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="singleOrDefault" fullname="rx:AbsObservable/singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="skip" fullname="rx:AbsObservable/skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to skip from the start of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="skipLast" fullname="rx:AbsObservable/skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to skip from the end of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="skipUntil" fullname="rx:AbsObservable/skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="other" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequence that will mark the start of values being used from the current sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="skipWhile" fullname="rx:AbsObservable/skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></description>
                     <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The function to be executed as each value is emitted. When this function returns false, values will be used from the current sequence.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="startWith" fullname="rx:AbsObservable/startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="values" type="Array">
                           <description><![CDATA[The value to emit at the start of the sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="subscribe" fullname="rx:AbsObservable/subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling <code>unsubscribe()</code> 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="onNext" type="Function">
                           <description><![CDATA[Function to be called for every payload. Signature is <code>function(payload : T) : void</code>
   ]]></description>
                        </param>
                        <param name="onComplete" type="Function" default="null">
                           <description><![CDATA[Optional. Function to be called when the sequence completes. Signature is <code>function():void</code>
   ]]></description>
                        </param>
                        <param name="onError" type="Function" default="null">
                           <description><![CDATA[Optional. Function to be called when an error occurs in the sequence. Signature is <code>function(err:Error):void</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="subscribeOn" fullname="rx:AbsObservable/subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The subscriber to schedule subscriptions through
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="subscribeWith" fullname="rx:AbsObservable/subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling unsubscribe() 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="IObserver.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="sum" fullname="rx:AbsObservable/sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Number
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="take" fullname="rx:AbsObservable/take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></description>
                     <shortDescription><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to use from the start of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="takeLast" fullname="rx:AbsObservable/takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to use from the end of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="takeUntil" fullname="rx:AbsObservable/takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></description>
                     <shortDescription><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="other" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequence that will mark the end of values being used from the current sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="takeWhile" fullname="rx:AbsObservable/takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The function to be executed as each value is emitted. When this function returns false, values will no longer be used from the current sequence.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="throttle" fullname="rx:AbsObservable/throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></description>
                     <shortDescription><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="dueTimeMs" type="uint">
                           <description><![CDATA[The interval of time, in milliseconds, during which only one value from the source sequence will be accepted
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timeInterval" fullname="rx:AbsObservable/timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of TimeInterval
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use to determine time
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timeout" fullname="rx:AbsObservable/timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="timeoutMs" type="uint">
                           <description><![CDATA[The amount of time, in milliseconds, after which to raise an error (or subscribe to other)
   ]]></description>
                        </param>
                        <param name="other" type="rx:IObservable" default="null">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to in the event of a timeout. If null, a TimeoutError will be emitted.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timestamp" fullname="rx:AbsObservable/timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Timestamped 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="where" fullname="rx:AbsObservable/where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Filters out values from a source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Filters out values from a source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The predicate function to execute for each value to determine if it will be include in the output
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="zip" fullname="rx:AbsObservable/zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the returned sequence and return value of selector
   ]]></description>
                        </param>
                        <param name="rightSource" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to combine with the current
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to be executed when values are received from both sequences. The return value will be included in the output
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="valueClass" fullname="rx:AbsObservable/valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   The class of the values emitted by this observable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="FutureCancelable" type="class" fullname="rx:FutureCancelable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
 A cancelable resource than is not immediately available
 ]]></description>
               <shortDescription><![CDATA[
 A cancelable resource than is not immediately available
 ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="ICancelable.html"/>
                     <methods>
                        <method name="cancel" fullname="rx:ICancelable/rx:ICancelable:cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Cancels the operation
   ]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="FutureCancelable" fullname="rx:FutureCancelable/FutureCancelable" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="cancel" fullname="rx:FutureCancelable/cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Cancels the operation for current and future innerCancelable values
   ]]></description>
                     <shortDescription><![CDATA[
   Cancels the operation for current and future innerCancelable values
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="innerCancelable" fullname="rx:FutureCancelable/innerCancelable/set" accessLevel="public" isConst="false" isStatic="false" type="rx:ICancelable" inheritDoc="false" only="write">
                     <description><![CDATA[
   Assigns the cancelable operation.
   
   If an existing value exists for innerCancelable, it will be canceled.
   
   If cancel() has already been called on this FutureCancelable, the value 
   will be instantly canceled and innerCancelable will be null
   ]]></description>
                     <shortDescription><![CDATA[
   Assigns the cancelable operation.]]></shortDescription>
                     <versions/>
                     <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Cancelable" type="class" fullname="rx:Cancelable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Provides static methods that create cancelable resources
  ]]></description>
               <shortDescription><![CDATA[
  Provides static methods that create cancelable resources
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Cancelable" fullname="rx:Cancelable/Cancelable" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="create" fullname="rx:Cancelable/create" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a cancelable resource that calls a function when canceled
    
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a cancelable resource that calls a function when canceled
    
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to call when the resource is canceled 
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="empty" fullname="rx:Cancelable/empty/get" accessLevel="public" isConst="false" isStatic="true" type="rx:ICancelable" inheritDoc="false" only="read">
                     <description><![CDATA[
   Returns a cancelable resource that does nothing when canceled
   ]]></description>
                     <shortDescription><![CDATA[
   Returns a cancelable resource that does nothing when canceled
   ]]></shortDescription>
                     <versions/>
                     <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ISubject" type="interface" fullname="rx:ISubject" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A resource that is both observable and an observer
  ]]></description>
               <shortDescription><![CDATA[
  A resource that is both observable and an observer
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="Subject" fullName="rx:Subject" packageName="rx" relativePath="rx/Subject.html"/>
                  <classRef name="ReplaySubject" fullName="rx.subjects:ReplaySubject" packageName="rx.subjects" relativePath="subjects/ReplaySubject.html"/>
                  <classRef name="AsyncSubject" fullName="rx.subjects:AsyncSubject" packageName="rx.subjects" relativePath="subjects/AsyncSubject.html"/>
               </implementers>
               <asAncestors>
                  <asAncestor>
                     <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                     <fields>
                        <field name="valueClass" fullname="rx:IObservable/rx:IObservable:valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false">
                           <shortDescription><![CDATA[
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="aggregate" fullname="rx:IObservable/rx:IObservable:aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:IObservable/rx:IObservable:all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:IObservable/rx:IObservable:and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:IObservable/rx:IObservable:any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:IObservable/rx:IObservable:asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:IObservable/rx:IObservable:average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:IObservable/rx:IObservable:bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:IObservable/rx:IObservable:bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:IObservable/rx:IObservable:cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:IObservable/rx:IObservable:catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:IObservable/rx:IObservable:catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:IObservable/rx:IObservable:combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="returnClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:IObservable/rx:IObservable:concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:IObservable/rx:IObservable:contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:IObservable/rx:IObservable:count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:IObservable/rx:IObservable:delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:IObservable/rx:IObservable:dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:IObservable/rx:IObservable:distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:IObservable/rx:IObservable:doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="next" type="Function"/>
                              <param name="complete" type="Function" default="null"/>
                              <param name="error" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:IObservable/rx:IObservable:finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="finallyAction" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:IObservable/rx:IObservable:first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:IObservable/rx:IObservable:firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:IObservable/rx:IObservable:forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:IObservable/rx:IObservable:last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:IObservable/rx:IObservable:lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:IObservable/rx:IObservable:let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:IObservable/rx:IObservable:materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:IObservable/rx:IObservable:merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:IObservable/rx:IObservable:observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:IObservable/rx:IObservable:ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:IObservable/rx:IObservable:onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:IObservable/rx:IObservable:prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:IObservable/rx:IObservable:pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:IObservable/rx:IObservable:publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:IObservable/rx:IObservable:publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:IObservable/rx:IObservable:removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:IObservable/rx:IObservable:removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:IObservable/rx:IObservable:repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:IObservable/rx:IObservable:replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:IObservable/rx:IObservable:replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:IObservable/rx:IObservable:retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:IObservable/rx:IObservable:sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:IObservable/rx:IObservable:scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:IObservable/rx:IObservable:select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:IObservable/rx:IObservable:selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:IObservable/rx:IObservable:single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:IObservable/rx:IObservable:singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:IObservable/rx:IObservable:skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:IObservable/rx:IObservable:skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:IObservable/rx:IObservable:skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:IObservable/rx:IObservable:skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:IObservable/rx:IObservable:startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:IObservable/rx:IObservable:subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:IObservable/rx:IObservable:subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribeWith" fullname="rx:IObservable/rx:IObservable:subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:IObservable/rx:IObservable:sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:IObservable/rx:IObservable:take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:IObservable/rx:IObservable:takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:IObservable/rx:IObservable:takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:IObservable/rx:IObservable:takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:IObservable/rx:IObservable:throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:IObservable/rx:IObservable:timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:IObservable/rx:IObservable:timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:IObservable/rx:IObservable:timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:IObservable/rx:IObservable:where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:IObservable/rx:IObservable:zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="IObserver.html"/>
                     <methods>
                        <method name="onCompleted" fullname="rx:IObserver/rx:IObserver:onCompleted" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></shortDescription>
                        </method>
                        <method name="onError" fullname="rx:IObserver/rx:IObserver:onError" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></shortDescription>
                           <params>
                              <param name="error" type="Error"/>
                           </params>
                        </method>
                        <method name="onNext" fullname="rx:IObserver/rx:IObserver:onNext" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Notifies the subscriber that a value has been received
   ]]></shortDescription>
                           <params>
                              <param name="value" type="Object"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
            </asClass>
            <asClass name="CompositeCancelable" type="class" fullname="rx:CompositeCancelable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Represents a cancelable resource that controls multiple 
  other cancelable resources 
  ]]></description>
               <shortDescription><![CDATA[
  Represents a cancelable resource that controls multiple 
  other cancelable resources 
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="ICancelable.html"/>
                     <methods>
                        <method name="cancel" fullname="rx:ICancelable/rx:ICancelable:cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Cancels the operation
   ]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="CompositeCancelable" fullname="rx:CompositeCancelable/CompositeCancelable" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a composite cancelable instance with the cancelable 
   instances to start with
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a composite cancelable instance with the cancelable 
   instances to start with
   ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="values" type="Array" default="null"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="add" fullname="rx:CompositeCancelable/add" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Adds a cancelable resource to the list of cancelable resources. If 
   this instance has already been canceled, the resource will be immediately 
   canceled and not added to the list.
   ]]></description>
                     <shortDescription><![CDATA[
   Adds a cancelable resource to the list of cancelable resources.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="cancelable" type="rx:ICancelable">
                           <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="ICancelable.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="cancel" fullname="rx:CompositeCancelable/cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Cancels (and removes) all resources in this instance
   ]]></description>
                     <shortDescription><![CDATA[
   Cancels (and removes) all resources in this instance
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="remove" fullname="rx:CompositeCancelable/remove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes a cancelable resource from the list
   ]]></description>
                     <shortDescription><![CDATA[
   Removes a cancelable resource from the list
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="cancelable" type="rx:ICancelable">
                           <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="ICancelable.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="cancelables" fullname="rx:CompositeCancelable/cancelables/get" accessLevel="public" isConst="false" isStatic="false" type="Array" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the list of cancelable resources in this instance
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the list of cancelable resources in this instance
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="count" fullname="rx:CompositeCancelable/count/get" accessLevel="public" isConst="false" isStatic="false" type="uint" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the number of resources in this list
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the number of resources in this list
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="OnError" type="class" fullname="rx:OnError" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A Notification for an onError call
  ]]></description>
               <shortDescription><![CDATA[
  A Notification for an onError call
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="Notification" fullName="rx:Notification" packageName="rx" relativePath="Notification.html"/>
                     <methods>
                        <method name="acceptWith" fullname="rx:Notification/acceptWith" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Calls the appropriate method on an observer
   ]]></shortDescription>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="OnError" fullname="rx:OnError/OnError" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="error" type="Error"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="accept" fullname="rx:OnError/accept" accessLevel="public" result_type="void" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Calls onError if it's not null
   ]]></description>
                     <shortDescription><![CDATA[
   Calls onError if it's not null
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="onNext" type="Function"/>
                        <param name="onCompleted" type="Function" default="null"/>
                        <param name="onError" type="Function" default="null"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="error" fullname="rx:OnError/error/get" accessLevel="public" isConst="false" isStatic="false" type="Error" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the error for this message 
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the error for this message 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="hasValue" fullname="rx:OnError/hasValue/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns false since no values are associated with errors 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns false since no values are associated with errors 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="kind" fullname="rx:OnError/kind/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns NotificationKind.ON_ERROR 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns NotificationKind.ON_ERROR 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="value" fullname="rx:OnError/value/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns null since no values are associated with errors 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns null since no values are associated with errors 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="TimeoutError" type="class" fullname="rx:TimeoutError" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An error thrown by Observable.timeout by default
  ]]></description>
               <shortDescription><![CDATA[
  An error thrown by Observable.timeout by default
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="Error" fullName="Error" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="TimeoutError" fullname="rx:TimeoutError/TimeoutError" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="message" type="String"/>
                        <param name="id" type="int" default="0"/>
                     </params>
                  </constructor>
               </constructors>
            </asClass>
            <asClass name="Notification" type="class" fullname="rx:Notification" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Represents one of the three messages that can be sent to 
  an observer.
  
  ]]></description>
               <shortDescription><![CDATA[
  Represents one of the three messages that can be sent to 
  an observer.]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="rx/OnNext.html" label="rx.OnNext"/>
                  <see href="rx/OnCompleted.html" label="rx.OnCompleted"/>
                  <see href="rx/OnError.html" label="rx.OnError"/>
               </sees>
               <asDecendants>
                  <classRef name="OnCompleted" fullName="rx:OnCompleted" packageName="rx" relativePath="rx/OnCompleted.html"/>
                  <classRef name="OnNext" fullName="rx:OnNext" packageName="rx" relativePath="rx/OnNext.html"/>
                  <classRef name="OnError" fullName="rx:OnError" packageName="rx" relativePath="rx/OnError.html"/>
               </asDecendants>
               <asAncestors/>
               <constructors>
                  <constructor name="Notification" fullname="rx:Notification/Notification" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="accept" fullname="rx:Notification/accept" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Calls the appropriate method
   ]]></description>
                     <shortDescription><![CDATA[
   Calls the appropriate method
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="onNext" type="Function"/>
                        <param name="onCompleted" type="Function" default="null"/>
                        <param name="onError" type="Function" default="null"/>
                     </params>
                  </method>
                  <method name="acceptWith" fullname="rx:Notification/acceptWith" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Calls the appropriate method on an observer
   ]]></description>
                     <shortDescription><![CDATA[
   Calls the appropriate method on an observer
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="IObserver.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="error" fullname="rx:Notification/error/get" accessLevel="public" isConst="false" isStatic="false" type="Error" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the error associated with this message or null if there is no error.
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the error associated with this message or null if there is no error.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="hasValue" fullname="rx:Notification/hasValue/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Determined whether this instance has a value property available
   ]]></description>
                     <shortDescription><![CDATA[
   Determined whether this instance has a value property available
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="kind" fullname="rx:Notification/kind/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the NotificationKind of this instance
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the NotificationKind of this instance
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="value" fullname="rx:Notification/value/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the value associated with this message
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the value associated with this message
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Observer" type="class" fullname="rx:Observer" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Provides static methods that create observers
  ]]></description>
               <shortDescription><![CDATA[
  Provides static methods that create observers
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Observer" fullname="rx:Observer/Observer" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="create" fullname="rx:Observer/create" accessLevel="public" result_type="rx:IObserver" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates an IObserver from onNext, onCompleted and onError functions
   
   ]]></description>
                     <shortDescription><![CDATA[
   Creates an IObserver from onNext, onCompleted and onError functions
   
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObserver">
                        <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="rx/IObserver.html"/>
                     </result>
                     <params>
                        <param name="onNext" type="Function">
                           <description><![CDATA[The function to call when a value is received
   ]]></description>
                        </param>
                        <param name="onCompleted" type="Function" default="null">
                           <description><![CDATA[The function to call when the sequence has complted
   ]]></description>
                        </param>
                        <param name="onError" type="Function" default="null">
                           <description><![CDATA[The function to call if an error occurs in the sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="Observable" type="class" fullname="rx:Observable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Provides static methods that create observable sequences
  ]]></description>
               <shortDescription><![CDATA[
  Provides static methods that create observable sequences
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Observable" fullname="rx:Observable/Observable" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="amb" fullname="rx:Observable/amb" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Takes multiple source sequences and returns values from the first sequence to emit a value  
   ]]></description>
                     <shortDescription><![CDATA[
   Takes multiple source sequences and returns values from the first sequence to emit a value  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the first sequence in sources
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="Array">
                           <description><![CDATA[The sources that will be subscribed to
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="catchErrors" fullname="rx:Observable/catchErrors" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Concatonates a list of sequences as each one errors. A successful sequence ends the concatonation.  
   ]]></description>
                     <shortDescription><![CDATA[
   Concatonates a list of sequences as each one errors.]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence with the valueClass of the first sequence in sources
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="Array">
                           <description><![CDATA[The list of sequence to concatonate.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="concat" fullname="rx:Observable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes 
   ]]></description>
                     <shortDescription><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class common to all sequences in sources
   ]]></description>
                        </param>
                        <param name="sources" type="Array">
                           <description><![CDATA[The sequences to concatonate
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="create" fullname="rx:Observable/create" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a custom observable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a custom observable sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the created sequence 
   ]]></description>
                        </param>
                        <param name="subscribeFunc" type="Function">
                           <description><![CDATA[The function that will be executed when a subscriber subscribes, the return value of which is a function to be run when the sequence is terminated
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="createWithCancelable" fullname="rx:Observable/createWithCancelable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a custom observable sequence that uses cancelable resources 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a custom observable sequence that uses cancelable resources 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the created sequence 
   ]]></description>
                        </param>
                        <param name="subscribeFunc" type="Function">
                           <description><![CDATA[The function that will be executed when a subscriber subscribes, the return value of which is an ICancelable to be canceled when the sequence is terminated
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="defer" fullname="rx:Observable/defer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Defers selection of a sequence until the sequence is subscribed to  
   ]]></description>
                     <shortDescription><![CDATA[
   Defers selection of a sequence until the sequence is subscribed to  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the returned sequence
   ]]></description>
                        </param>
                        <param name="observableFactory" type="Function">
                           <description><![CDATA[The function that will be executed when a new subscription occurs, the returned sequence will be used for the subscriber.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="empty" fullname="rx:Observable/empty" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence that immediately completes  
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence that immediately completes  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The value class for the sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="forkJoin" fullname="rx:Observable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Subscribes to multiple source sequence and emits the last values of each after all have completed 
   ]]></description>
                     <shortDescription><![CDATA[
   Subscribes to multiple source sequence and emits the last values of each after all have completed 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Array
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="Array">
                           <description><![CDATA[The sequences to subscribe to
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromArray" fullname="rx:Observable/fromArray" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence consisting of the values in an Array 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence consisting of the values in an Array 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of elementClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="elementClass" type="Class">
                           <description><![CDATA[The class common to all values in values
   ]]></description>
                        </param>
                        <param name="values" type="Array">
                           <description><![CDATA[The array of values to iterate through
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromAsyncPattern" fullname="rx:Observable/fromAsyncPattern" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
    Creates an observable sequence from a function that returns an AsyncToken 
    ]]></description>
                     <shortDescription><![CDATA[
    Creates an observable sequence from a function that returns an AsyncToken 
    ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
    ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the value returned by the AsyncToken
    ]]></description>
                        </param>
                        <param name="asyncMethod" type="Function">
                           <description><![CDATA[The method to execute when a new subscription occurs. This method must return AsyncToken
    ]]></description>
                        </param>
                        <param name="args" type="Array">
                           <description><![CDATA[The arguments to supply to asyncMethod
    ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromCollection" fullname="rx:Observable/fromCollection" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
    Creates a sequence consisting of the values in a collection 
    ]]></description>
                     <shortDescription><![CDATA[
    Creates a sequence consisting of the values in a collection 
    ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of elementType
    ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="elementClass" type="Class">
                           <description><![CDATA[The class common to all values in values
    ]]></description>
                        </param>
                        <param name="collection" type="mx.collections:ICollectionView">
                           <description><![CDATA[The collection of values to iterate through
    ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
    ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromErrorEvent" fullname="rx:Observable/fromErrorEvent" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence that emits an error when an event is received from an IEventDispatcher  
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence that emits an error when an event is received from an IEventDispatcher  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass, or Object if valueClass is null 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass for the output sequence
   ]]></description>
                        </param>
                        <param name="eventDispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The IEventDispatcher that dispatches the event
   ]]></description>
                        </param>
                        <param name="eventType" type="String">
                           <description><![CDATA[The event valueClass name
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[Whether to pass useCapture when subscribing to and unsubscribing from the event
   ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[The priority of the event
   ]]></description>
                        </param>
                        <param name="errorMap" type="Function" default="null">
                           <description><![CDATA[The function that maps an event to an Error. null can be used if the event will be ErrorEvent
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromErrorEvents" fullname="rx:Observable/fromErrorEvents" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence that emits an error when one of several event valueClasss is received from an IEventDispatcher
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence that emits an error when one of several event valueClasss is received from an IEventDispatcher
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass for the output sequence
   ]]></description>
                        </param>
                        <param name="eventDispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The IEventDispatcher that dispatches the event
   ]]></description>
                        </param>
                        <param name="eventTypes" type="Array">
                           <description><![CDATA[The event valueClasss that signify an error
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[Whether to pass useCapture when subscribing to and unsubscribing from the event
   ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[The priority of the event
   ]]></description>
                        </param>
                        <param name="errorMap" type="Function" default="null">
                           <description><![CDATA[The function that maps an event to an Error. null can be used if the event will be ErrorEvent
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromEvent" fullname="rx:Observable/fromEvent" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence of events from an IEventDispatcher 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence of events from an IEventDispatcher 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of eventType, or Event if eventType is null
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="eventDispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The IEventDispatcher that dispatches the event
   ]]></description>
                        </param>
                        <param name="eventType" type="String">
                           <description><![CDATA[The event valueClass name
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The valueClass of event dispatched by eventDispatcher. Event will be used if this argument is null.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[Whether to pass useCapture when subscribing to and unsubscribing from the event
   ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[The priority of the event
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromEvents" fullname="rx:Observable/fromEvents" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates Combines events from multiple event valueClasss 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates Combines events from multiple event valueClasss 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of commonValueClass, or Event if commonValueClass is null 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="eventDispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The IEventDispatcher that dispatches the event
   ]]></description>
                        </param>
                        <param name="eventTypes" type="Array">
                           <description><![CDATA[An array event type names
   ]]></description>
                        </param>
                        <param name="commonValueClass" type="Class" default="null">
                           <description><![CDATA[The valueClass of event common to all events. Event will be used if this argument is null.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[Whether to pass useCapture when subscribing to and unsubscribing from the event
   ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[The priority of the event
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="fromViewCursor" fullname="rx:Observable/fromViewCursor" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
    Creates a sequence consisting of the values in a view cursor 
    ]]></description>
                     <shortDescription><![CDATA[
    Creates a sequence consisting of the values in a view cursor 
    ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of elementClass
    ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="elementClass" type="Class">
                           <description><![CDATA[The class common to all values in values
    ]]></description>
                        </param>
                        <param name="cursor" type="mx.collections:IViewCursor">
                           <description><![CDATA[The view cursor of values to iterate through
    ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
    ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="generate" fullname="rx:Observable/generate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a custom observable sequence that is controlled by methods supplied as arguments 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a custom observable sequence that is controlled by methods supplied as arguments 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of values emitted by the sequence
   ]]></description>
                        </param>
                        <param name="initialState" type="Object">
                           <description><![CDATA[The initial state value to use (of class valueClass)
   ]]></description>
                        </param>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The predicate to determine whether the sequence has completed
   ]]></description>
                        </param>
                        <param name="iterate" type="Function">
                           <description><![CDATA[The function executed between iterations
   ]]></description>
                        </param>
                        <param name="resultMap" type="Function">
                           <description><![CDATA[The function that maps the current state to an output value
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="ifElse" fullname="rx:Observable/ifElse" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Defers selection of one of two sequences until the sequence is subscribed to
   ]]></description>
                     <shortDescription><![CDATA[
   Defers selection of one of two sequences until the sequence is subscribed to
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the returned sequence
   ]]></description>
                        </param>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The function to execute when a subscription occurs to determine which sequence to subscribe to
   ]]></description>
                        </param>
                        <param name="ifTrue" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to if predicate returns true
   ]]></description>
                        </param>
                        <param name="ifFalse" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to if predicate returns false
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="interval" fullname="rx:Observable/interval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates an unending observable sequence of integers that are incremented at a regular interval 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates an unending observable sequence of integers that are incremented at a regular interval 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of int
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="intervalMs" type="uint">
                           <description><![CDATA[The interval, in milliseconds, to wait in between values
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used for timing
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="join" fullname="rx:Observable/join" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Matches join multiple plans (source sequence combinations) in the order they are specified 
   ]]></description>
                     <shortDescription><![CDATA[
   Matches join multiple plans (source sequence combinations) in the order they are specified 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The common value class shared between the output of all plans in plans 
   ]]></description>
                        </param>
                        <param name="plans" type="Array">
                           <description><![CDATA[The array of rx.Plan objects creates using 'and' and 'then'
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="loader" fullname="rx:Observable/loader" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates an observable sequence that loads an object from a URLRequest 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates an observable sequence that loads an object from a URLRequest 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Object
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="request" type="flash.net:URLRequest">
                           <description><![CDATA[The URLRequest to load
   ]]></description>
                        </param>
                        <param name="loaderContext" type="flash.system:LoaderContext" default="null">
                           <description><![CDATA[The optional LoaderContext to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="lookup" fullname="rx:Observable/lookup" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Defers selection of the sequence to use by using a function that returns a key into a dictionary of sequences 
   ]]></description>
                     <shortDescription><![CDATA[
   Defers selection of the sequence to use by using a function that returns a key into a dictionary of sequences 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the return sequence
   ]]></description>
                        </param>
                        <param name="keySelector" type="Function">
                           <description><![CDATA[The function that, at the moment of subscription, will return the key into dictionary
   ]]></description>
                        </param>
                        <param name="dictionary" type="flash.utils:Dictionary">
                           <description><![CDATA[The dictionary of sequences
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="merge" fullname="rx:Observable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass common to all sequences emitted by source
   ]]></description>
                        </param>
                        <param name="sources" type="Array">
                           <description><![CDATA[An array of IObservable sequences
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mergeMany" fullname="rx:Observable/mergeMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass common to all sequences emitted by source
   ]]></description>
                        </param>
                        <param name="source" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[An IObservable with valueClass IObservable, the values of which will be merged
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to control flow
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="never" fullname="rx:Observable/never" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Returns an IObservable that never completes
   ]]></description>
                     <shortDescription><![CDATA[
   Returns an IObservable that never completes
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class" default="null"/>
                     </params>
                  </method>
                  <method name="onErrorResumeNext" fullname="rx:Observable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Concatonates a list of sequence as each one errors or complete 
   ]]></description>
                     <shortDescription><![CDATA[
   Concatonates a list of sequence as each one errors or complete 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the valueClass of the value sequence in sources
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="Array">
                           <description><![CDATA[The list of sequences to concatonate
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="range" fullname="rx:Observable/range" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence of consecutive integers  
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence of consecutive integers  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of int
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="start" type="int">
                           <description><![CDATA[The inclusive start value of the range
   ]]></description>
                        </param>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values, including start, to emit
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="repeatValue" fullname="rx:Observable/repeatValue" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Repeats a value a specification number of times 
   ]]></description>
                     <shortDescription><![CDATA[
   Repeats a value a specification number of times 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the sequence and of value
   ]]></description>
                        </param>
                        <param name="value" type="Object">
                           <description><![CDATA[The value to repeat
   ]]></description>
                        </param>
                        <param name="repeatCount" type="uint" default="0">
                           <description><![CDATA[The number of times to emit the value
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="responder" fullname="rx:Observable/responder" accessLevel="public" result_type="rx.flex:IObservableResponder" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
    Creates an observable sequence that is also an IResponder 
    ]]></description>
                     <shortDescription><![CDATA[
    Creates an observable sequence that is also an IResponder 
    ]]></shortDescription>
                     <versions/>
                     <result type="rx.flex:IObservableResponder">
                        <![CDATA[An observable sequence of valueClass
    ]]>
                        <classRef name="IObservableResponder" fullName="rx.flex:IObservableResponder" packageName="rx.flex" relativePath="flex/IObservableResponder.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the returned sequence
    ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="returnValue" fullname="rx:Observable/returnValue" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Create a sequence consisting of exactly one value 
   ]]></description>
                     <shortDescription><![CDATA[
   Create a sequence consisting of exactly one value 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the sequence and of value
   ]]></description>
                        </param>
                        <param name="value" type="Object">
                           <description><![CDATA[The value to emit
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use to control flow
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="start" fullname="rx:Observable/start" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence based on a call to a function  
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence based on a call to a function  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to call
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The valueClass of the sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="throwError" fullname="rx:Observable/throwError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequence that immediately throws an Error  
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequence that immediately throws an Error  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="error" type="Error">
                           <description><![CDATA[The error to raise when a new subscription occurs
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The Class of the returned sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timer" fullname="rx:Observable/timer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates an unending observable sequence of integers that begin after a delay and are incremented at a regular interval 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates an unending observable sequence of integers that begin after a delay and are incremented at a regular interval 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of int
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="delayMs" type="uint">
                           <description><![CDATA[The interval, in milliseconds, to wait before the first value
   ]]></description>
                        </param>
                        <param name="intervalMs" type="uint">
                           <description><![CDATA[The interval, in milliseconds, to wait in between subsequent values
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used for timing
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="toAsync" fullname="rx:Observable/toAsync" accessLevel="public" result_type="Function" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Converts a function into an observable sequence  
   ]]></description>
                     <shortDescription><![CDATA[
   Converts a function into an observable sequence  
   ]]></shortDescription>
                     <versions/>
                     <result type="Function"><![CDATA[An observable sequence of valueClass
   ]]></result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to call
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The valueClass of the sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="uncaughtErrors" fullname="rx:Observable/uncaughtErrors" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates a sequences that accesses uncaught errors if supported by the platform (Flash Player 10.1+)
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a sequences that accesses uncaught errors if supported by the platform (Flash Player 10.1+)
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of errors
   
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="loaderInfo" type="flash.display:LoaderInfo" default="null">
                           <description><![CDATA[The LoaderInfo to catch uncaught errors from, or the LoaderInfo into which rx.Observable was loaded if the argument is null
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="urlLoader" fullname="rx:Observable/urlLoader" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Creates an observable sequence that loads an object from a URLRequest 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates an observable sequence that loads an object from a URLRequest 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Object
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="request" type="flash.net:URLRequest">
                           <description><![CDATA[The URLRequest to load
   ]]></description>
                        </param>
                        <param name="dataFormat" type="String" default="text">
                           <description><![CDATA[A value of flash.net.URLLoaderDataFormat
   ]]></description>
                        </param>
                        <param name="loaderContext" type="flash.system:LoaderContext" default="null">
                           <description><![CDATA[The optional LoaderContext to use
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="BooleanCancelable" type="class" fullname="rx:BooleanCancelable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Represents a cancelable operation, the canceled status of which can 
  be checked by isCanceled 
 ]]></description>
               <shortDescription><![CDATA[
  Represents a cancelable operation, the canceled status of which can 
  be checked by isCanceled 
 ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="ICancelable.html"/>
                     <methods>
                        <method name="cancel" fullname="rx:ICancelable/rx:ICancelable:cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Cancels the operation
   ]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="BooleanCancelable" fullname="rx:BooleanCancelable/BooleanCancelable" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="cancel" fullname="rx:BooleanCancelable/cancel" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Cancels the operation. isCanceled will return true after this call.
   ]]></description>
                     <shortDescription><![CDATA[
   Cancels the operation.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="isCanceled" fullname="rx:BooleanCancelable/isCanceled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Determines if canceled() has been called on this instance
   ]]></description>
                     <shortDescription><![CDATA[
   Determines if canceled() has been called on this instance
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IObservable" type="interface" fullname="rx:IObservable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An observable sequence of values
  ]]></description>
               <shortDescription><![CDATA[
  An observable sequence of values
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="AbsObservable" fullName="rx:AbsObservable" packageName="rx" relativePath="rx/AbsObservable.html"/>
               </implementers>
               <asDecendants>
                  <classRef name="ISubject" fullName="rx:ISubject" packageName="rx" relativePath="rx/ISubject.html"/>
                  <classRef name="IObservableResponder" fullName="rx.flex:IObservableResponder" packageName="rx.flex" relativePath="flex/IObservableResponder.html"/>
                  <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
               </asDecendants>
               <asAncestors/>
               <methods>
                  <method name="aggregate" fullname="rx:IObservable/rx:IObservable:aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ 
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[ 
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass (or this instance's valueClass if valueClass is null)
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="accumulator" type="Function">
                           <description><![CDATA[A function that accumulates the aggregate value
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The class of the values returned by accumulator
   ]]></description>
                        </param>
                        <param name="initialValue" type="Object" default="null">
                           <description><![CDATA[The value to start with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="all" fullname="rx:IObservable/rx:IObservable:all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Boolean
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The predicate that determines if a value in the sequence is valid. If null, the value will be evaulated to boolean. 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="and" fullname="rx:IObservable/rx:IObservable:and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[ 
   Creates a pattern by combining the current source with right.
   
   <p><a href="http://wiki.github.com/richardszalay/rxas/and">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[ 
   Creates a pattern by combining the current source with right.]]></shortDescription>
                     <versions/>
                     <result type="rx:Pattern">
                        <![CDATA[A pattern representing both sequences
   ]]>
                        <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="rx/Pattern.html"/>
                     </result>
                     <params>
                        <param name="right" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequence to combine with the pattern.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="any" fullname="rx:IObservable/rx:IObservable:any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></description>
                     <shortDescription><![CDATA[
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Boolean
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function" default="null">
                           <description><![CDATA[The predicate that determines if a value in the sequence is valid. If null, the value will be evaulated to boolean. 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="asObservable" fullname="rx:IObservable/rx:IObservable:asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></description>
                     <shortDescription><![CDATA[
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="average" fullname="rx:IObservable/rx:IObservable:average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence (which should be numeric)
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="bufferWithCount" fullname="rx:IObservable/rx:IObservable:bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to buffer
   ]]></description>
                        </param>
                        <param name="skip" type="uint" default="0">
                           <description><![CDATA[The number of values to offset after the buffer is emitted.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="bufferWithTime" fullname="rx:IObservable/rx:IObservable:bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="timeMs" type="uint">
                           <description><![CDATA[The amount of time to buffer before the values are released
   ]]></description>
                        </param>
                        <param name="timeShiftMs" type="uint" default="0">
                           <description><![CDATA[The amount of time to offset after the buffer is emitted
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="cast" fullname="rx:IObservable/rx:IObservable:cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the output sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="catchError" fullname="rx:IObservable/rx:IObservable:catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="second" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to when an error occurs
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="catchErrorDefer" fullname="rx:IObservable/rx:IObservable:catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="errorClass" type="Class">
                           <description><![CDATA[The class (and superclass) of error to act on
   ]]></description>
                        </param>
                        <param name="deferFunc" type="Function">
                           <description><![CDATA[The function to execute in the event of an error. Signature is <code>function(e : Error) : IObservable</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="combineLatest" fullname="rx:IObservable/rx:IObservable:combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of returnType 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="returnClass" type="Class">
                           <description><![CDATA[The valueClass of the values returned by selector
   ]]></description>
                        </param>
                        <param name="right" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to combine with
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function that combines values from the two sources. Signature is <code>function(left : this.valueClass, right : right.valueClass) : returnType</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="concat" fullname="rx:IObservable/rx:IObservable:concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="Array">
                           <description><![CDATA[The sequences to concatonate after the current sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="contains" fullname="rx:IObservable/rx:IObservable:contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Boolean
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="value" type="Object">
                           <description><![CDATA[The value to check against the sequence
   ]]></description>
                        </param>
                        <param name="comparer" type="Function" default="null">
                           <description><![CDATA[The function used to compare values. Default equality will be used if comparer is null.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="count" fullname="rx:IObservable/rx:IObservable:count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of int
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="delay" fullname="rx:IObservable/rx:IObservable:delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="delayMs" type="uint">
                           <description><![CDATA[The amount of time, in milliseconds, to delay
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler used to delay the values
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="dematerialize" fullname="rx:IObservable/rx:IObservable:dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the original values 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="distinctUntilChanged" fullname="rx:IObservable/rx:IObservable:distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Filters out consecutive duplicates from a source sequence  
   ]]></description>
                     <shortDescription><![CDATA[
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="comparer" type="Function" default="null">
                           <description><![CDATA[The function used to compare values. Default equality will be used if comparer is null.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="doAction" fullname="rx:IObservable/rx:IObservable:doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="next" type="Function">
                           <description><![CDATA[The function to execute in the event of a value (onNext)
   ]]></description>
                        </param>
                        <param name="complete" type="Function" default="null">
                           <description><![CDATA[The function to execute in the event the sequence completes (onComplete)
   ]]></description>
                        </param>
                        <param name="error" type="Function" default="null">
                           <description><![CDATA[The function to execute in the event of an error (onError)
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="finallyAction" fullname="rx:IObservable/rx:IObservable:finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="finallyAction" type="Function">
                           <description><![CDATA[The function to execute in the event the sequence completes or errors
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="first" fullname="rx:IObservable/rx:IObservable:first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="firstOrDefault" fullname="rx:IObservable/rx:IObservable:firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="forkJoin" fullname="rx:IObservable/rx:IObservable:forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass resultClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="resultClass" type="Class">
                           <description><![CDATA[The class of the valueClass returned by selector
   ]]></description>
                        </param>
                        <param name="right" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to, along with the current sequence
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function that accepts the last values of both sequences and returns the output value 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="last" fullname="rx:IObservable/rx:IObservable:last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="lastOrDefault" fullname="rx:IObservable/rx:IObservable:lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="let" fullname="rx:IObservable/rx:IObservable:let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[The observable sequence returned by func 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="func" type="Function">
                           <description><![CDATA[The function to send the current sequence through, and return a new sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="materialize" fullname="rx:IObservable/rx:IObservable:materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></description>
                     <shortDescription><![CDATA[
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of rx.Notification
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="merge" fullname="rx:IObservable/rx:IObservable:merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="sources" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequences from which the values will be merged with the current sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="observeOn" fullname="rx:IObservable/rx:IObservable:observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Defers messages to subscribers through a scheduler  
   ]]></description>
                     <shortDescription><![CDATA[
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The subscriber to send messages to subscribers through
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="ofClass" fullname="rx:IObservable/rx:IObservable:ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></description>
                     <shortDescription><![CDATA[
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class (or subsclass) of all values to emit 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="onErrorResumeNext" fullname="rx:IObservable/rx:IObservable:onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Subscribes down a list of sequence as each one errors or complete 
   ]]></description>
                     <shortDescription><![CDATA[
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="second" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to run after the current sequence completes or errors
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use to subscribe to the new sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="prune" fullname="rx:IObservable/rx:IObservable:prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx.subjects:IConnectableObservable">
                        <![CDATA[A connectable observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="pruneAndConnect" fullname="rx:IObservable/rx:IObservable:pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to map the connected sequence through
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="publish" fullname="rx:IObservable/rx:IObservable:publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx.subjects:IConnectableObservable">
                        <![CDATA[A connectable observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                     </result>
                  </method>
                  <method name="publishAndConnect" fullname="rx:IObservable/rx:IObservable:publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></description>
                     <shortDescription><![CDATA[
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to map the connected sequence through
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeTimeInterval" fullname="rx:IObservable/rx:IObservable:removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes time interval information added with timeInterval  
   ]]></description>
                     <shortDescription><![CDATA[
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the original values
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeTimestamp" fullname="rx:IObservable/rx:IObservable:removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes timestamp information added with timestamp  
   ]]></description>
                     <shortDescription><![CDATA[
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the original values
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="repeat" fullname="rx:IObservable/rx:IObservable:repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Repeats the source sequence a specific number of times 
   ]]></description>
                     <shortDescription><![CDATA[
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="repeatCount" type="uint" default="0">
                           <description><![CDATA[The number of times to repeat the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="replay" fullname="rx:IObservable/rx:IObservable:replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Records the output of the source sequence and replays it to future subscribers 
   ]]></description>
                     <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx.subjects:IConnectableObservable">
                        <![CDATA[A connectable observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="subjects/IConnectableObservable.html"/>
                     </result>
                     <params>
                        <param name="bufferSize" type="uint" default="0">
                           <description><![CDATA[The number of values at the end of the sequence to replay, or 0 for all.
   ]]></description>
                        </param>
                        <param name="window" type="uint" default="0">
                           <description><![CDATA[The window of time, in milliseconds, in which to replay values from the end of the sequence, or 0 for all.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="replayAndConnect" fullname="rx:IObservable/rx:IObservable:replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Records the output of the source sequence and replays it to future subscribers
   ]]></description>
                     <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to map the connected sequence through 
   ]]></description>
                        </param>
                        <param name="bufferSize" type="uint" default="0">
                           <description><![CDATA[The number of values at the end of the sequence to replay, or 0 for all.
   ]]></description>
                        </param>
                        <param name="window" type="uint" default="0">
                           <description><![CDATA[The window of time, in milliseconds, in which to replay values from the end of the sequence, or 0 for all.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="retry" fullname="rx:IObservable/rx:IObservable:retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Repeats the source sequence when an error occurs 
   ]]></description>
                     <shortDescription><![CDATA[
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="retryCount" type="uint" default="0">
                           <description><![CDATA[The number of times to retry the sequence in the event of an error
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="sample" fullname="rx:IObservable/rx:IObservable:sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the latest value on a time interval from a source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="intervalMs" type="uint">
                           <description><![CDATA[The interval of time, in milliseconds, to sample the current value after
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="scan" fullname="rx:IObservable/rx:IObservable:scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></description>
                     <shortDescription><![CDATA[
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="accumulator" type="Function">
                           <description><![CDATA[The function that accumulates values
   ]]></description>
                        </param>
                        <param name="valueClass" type="Class" default="null">
                           <description><![CDATA[The class of the returned sequence and return value of accumulator
   ]]></description>
                        </param>
                        <param name="initialValue" type="Object" default="null">
                           <description><![CDATA[The value to start with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="select" fullname="rx:IObservable/rx:IObservable:select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Maps the values from a source sequence through a function to change their value 
   ]]></description>
                     <shortDescription><![CDATA[
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass result
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the returned sequence and return value of accumulator 
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to be executed with each value
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="selectMany" fullname="rx:IObservable/rx:IObservable:selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></description>
                     <shortDescription><![CDATA[
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass result
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The valueClass of the sequences returned by selector
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to be executed with each value
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="single" fullname="rx:IObservable/rx:IObservable:single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the only item from a source sequence, or an error if any other number of values are emitted. 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="singleOrDefault" fullname="rx:IObservable/rx:IObservable:singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.  
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="skip" fullname="rx:IObservable/rx:IObservable:skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Ignores a set number of values from the start of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to skip from the start of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="skipLast" fullname="rx:IObservable/rx:IObservable:skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Ignores a set number of values from the end of the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to skip from the end of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="skipUntil" fullname="rx:IObservable/rx:IObservable:skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="other" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequence that will mark the start of values being used from the current sequence 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="skipWhile" fullname="rx:IObservable/rx:IObservable:skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Ignores values from a source sequence until a condition is no longer met
   ]]></description>
                     <shortDescription><![CDATA[
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The function to be executed as each value is emitted. When this function returns false, values will be used from the current sequence.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="startWith" fullname="rx:IObservable/rx:IObservable:startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Emits the specified values at the start of a sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="value" type="Array">
                           <description><![CDATA[The value to emit at the start of the sequence
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="subscribe" fullname="rx:IObservable/rx:IObservable:subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling <code>unsubscribe()</code> 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="onNext" type="Function">
                           <description><![CDATA[Function to be called for every payload. Signature is <code>function(payload : T) : void</code>
   ]]></description>
                        </param>
                        <param name="onComplete" type="Function" default="null">
                           <description><![CDATA[Optional. Function to be called when the sequence completes. Signature is <code>function():void</code>
   ]]></description>
                        </param>
                        <param name="onError" type="Function" default="null">
                           <description><![CDATA[Optional. Function to be called when an error occurs in the sequence. Signature is <code>function(err:Error):void</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="subscribeOn" fullname="rx:IObservable/rx:IObservable:subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Defers subscriptions to the source through a scheduler  
   ]]></description>
                     <shortDescription><![CDATA[
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The subscriber to schedule subscriptions through
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="subscribeWith" fullname="rx:IObservable/rx:IObservable:subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling unsubscribe() 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="IObserver.html"/>
                        </param>
                     </params>
                  </method>
                  <method name="sum" fullname="rx:IObservable/rx:IObservable:sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Returns the summed value of all the elements in the source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Number
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="take" fullname="rx:IObservable/rx:IObservable:take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Takes only the first set number of values from a source sequenc
   ]]></description>
                     <shortDescription><![CDATA[
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to use from the start of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="takeLast" fullname="rx:IObservable/rx:IObservable:takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Takes only the last set number of values from a source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="count" type="uint">
                           <description><![CDATA[The number of values to use from the end of the sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="takeUntil" fullname="rx:IObservable/rx:IObservable:takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></description>
                     <shortDescription><![CDATA[
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="other" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The other sequence that will mark the end of values being used from the current sequence
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="takeWhile" fullname="rx:IObservable/rx:IObservable:takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Takes values from a source sequence until a condition is no longer met 
   ]]></description>
                     <shortDescription><![CDATA[
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The function to be executed as each value is emitted. When this function returns false, values will no longer be used from the current sequence.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="throttle" fullname="rx:IObservable/rx:IObservable:throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Limits how often values from a source sequence will be accepted from a source
   ]]></description>
                     <shortDescription><![CDATA[
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="dueTimeMs" type="uint">
                           <description><![CDATA[The interval of time, in milliseconds, during which only one value from the source sequence will be accepted
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timeInterval" fullname="rx:IObservable/rx:IObservable:timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></description>
                     <shortDescription><![CDATA[
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of TimeInterval
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use to determine time
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timeout" fullname="rx:IObservable/rx:IObservable:timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></description>
                     <shortDescription><![CDATA[
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="timeoutMs" type="uint">
                           <description><![CDATA[The amount of time, in milliseconds, after which to raise an error (or subscribe to other)
   ]]></description>
                        </param>
                        <param name="other" type="rx:IObservable" default="null">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to subscribe to in the event of a timeout. If null, a TimeoutError will be emitted.
   ]]></description>
                        </param>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="timestamp" fullname="rx:IObservable/rx:IObservable:timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></description>
                     <shortDescription><![CDATA[
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of Timestamped 
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="scheduling/IScheduler.html"/>
                           <description><![CDATA[The scheduler to use
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="where" fullname="rx:IObservable/rx:IObservable:where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Filters out values from a source sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Filters out values from a source sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of the same valueClass as the current sequence
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="predicate" type="Function">
                           <description><![CDATA[The predicate function to execute for each value to determine if it will be include in the output
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="zip" fullname="rx:IObservable/rx:IObservable:zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></description>
                     <shortDescription><![CDATA[
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <![CDATA[An observable sequence of valueClass
   ]]>
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="rx/IObservable.html"/>
                     </result>
                     <params>
                        <param name="valueClass" type="Class">
                           <description><![CDATA[The class of the returned sequence and return value of selector
   ]]></description>
                        </param>
                        <param name="rightSource" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The sequence to combine with the current
   ]]></description>
                        </param>
                        <param name="selector" type="Function">
                           <description><![CDATA[The function to be executed when values are received from both sequences. The return value will be included in the output
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="valueClass" fullname="rx:IObservable/rx:IObservable:valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false" only="read">
                     <description><![CDATA[
   The class of the values emitted by this observable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Plan" type="class" fullname="rx:Plan" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A combination of IObservable sequences and a selector that will 
  map the values of those sequences to an output value. A plan is intended 
  to be used with Observable.join
  
  <p>Generally, a Plan will be created using Pattern.then(), rather 
  than creating a Plan directly</p>
  ]]></description>
               <shortDescription><![CDATA[
  A combination of IObservable sequences and a selector that will 
  map the values of those sequences to an output value.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Plan" fullname="rx:Plan/Plan" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="Class"/>
                        <param name="sources" type="Array"/>
                        <param name="selector" type="Function"/>
                     </params>
                  </constructor>
               </constructors>
               <fields>
                  <field name="selector" fullname="rx:Plan/selector/get" accessLevel="public" isConst="false" isStatic="false" type="Function" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the function selector that will accept one argument for each 
   sequence in sources and return the output value
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the function selector that will accept one argument for each 
   sequence in sources and return the output value
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="sources" fullname="rx:Plan/sources/get" accessLevel="public" isConst="false" isStatic="false" type="Array" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the observable sequences in this plan
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the observable sequences in this plan
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Pattern" type="class" fullname="rx:Pattern" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A combination of multiple IObservable sequences that can be combined 
  into a Plan
  
  <p>Generally, a Pattern will be created using IObservable.and or 
  Pattern.and(), rather than creating a Pattern directly</p>
  ]]></description>
               <shortDescription><![CDATA[
  A combination of multiple IObservable sequences that can be combined 
  into a Plan
  
  <p>Generally, a Pattern will be created using IObservable.and or 
  Pattern.and(), rather than creating a Pattern directly</p>
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Pattern" fullname="rx:Pattern/Pattern" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="sources" type="Array"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="and" fullname="rx:Pattern/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates another pattern that combines the IObservable sequences 
   of this Pattern with another IObservable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates another pattern that combines the IObservable sequences 
   of this Pattern with another IObservable sequence 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:Pattern">
                        <![CDATA[A Pattern with the new set of sequences
   
   ]]>
                        <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="rx/Pattern.html"/>
                     </result>
                     <params>
                        <param name="source" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="IObservable.html"/>
                           <description><![CDATA[The IObservable sequence to add
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="then" fullname="rx:Pattern/then" accessLevel="public" result_type="rx:Plan" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Creates a Plan from this Pattern, by supplying a 
   valueClass and a mappingFunction for the values from each 
   sequence in this Pattern 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a Plan from this Pattern, by supplying a 
   valueClass and a mappingFunction for the values from each 
   sequence in this Pattern 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:Plan">
                        <![CDATA[A Plan that can be used with Observable.join
   ]]>
                        <classRef name="Plan" fullName="rx:Plan" packageName="rx" relativePath="rx/Plan.html"/>
                     </result>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The valueClass that will be returned by thenFunction
   ]]></description>
                        </param>
                        <param name="thenFunction" type="Function">
                           <description><![CDATA[The function that will accept one argument for each 
   sequence in the pattern and output a valueClass
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="types" fullname="rx:Pattern/types" accessLevel="public" result_type="Array" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Gets the types associated with this Pattern in an immutable array
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the types associated with this Pattern in an immutable array
   ]]></shortDescription>
                     <versions/>
                     <result type="Array"/>
                  </method>
               </methods>
            </asClass>
            <asClass name="IObserver" type="interface" fullname="rx:IObserver" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An object that receives messages from an IObservable sequence
  
  ]]></description>
               <shortDescription><![CDATA[
  An object that receives messages from an IObservable sequence
  
  ]]></shortDescription>
               <versions/>
               <author/>
               <sees>
                  <see href="Observer.html" label="Observer"/>
               </sees>
               <asDecendants>
                  <classRef name="ISubject" fullName="rx:ISubject" packageName="rx" relativePath="rx/ISubject.html"/>
               </asDecendants>
               <asAncestors/>
               <methods>
                  <method name="onCompleted" fullname="rx:IObserver/rx:IObserver:onCompleted" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></description>
                     <shortDescription><![CDATA[
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onError" fullname="rx:IObserver/rx:IObserver:onError" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></description>
                     <shortDescription><![CDATA[
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="error" type="Error"/>
                     </params>
                  </method>
                  <method name="onNext" fullname="rx:IObserver/rx:IObserver:onNext" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Notifies the subscriber that a value has been received
   ]]></description>
                     <shortDescription><![CDATA[
   Notifies the subscriber that a value has been received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="value" type="Object"/>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="OnCompleted" type="class" fullname="rx:OnCompleted" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A Notification for an onCompleted call
  ]]></description>
               <shortDescription><![CDATA[
  A Notification for an onCompleted call
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="Notification" fullName="rx:Notification" packageName="rx" relativePath="Notification.html"/>
                     <methods>
                        <method name="acceptWith" fullname="rx:Notification/acceptWith" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Calls the appropriate method on an observer
   ]]></shortDescription>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="OnCompleted" fullname="rx:OnCompleted/OnCompleted" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="accept" fullname="rx:OnCompleted/accept" accessLevel="public" result_type="void" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Calls onCompleted if it's not null
   ]]></description>
                     <shortDescription><![CDATA[
   Calls onCompleted if it's not null
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="onNext" type="Function"/>
                        <param name="onCompleted" type="Function" default="null"/>
                        <param name="onError" type="Function" default="null"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="error" fullname="rx:OnCompleted/error/get" accessLevel="public" isConst="false" isStatic="false" type="Error" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns false since no errors are associated with completion 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns false since no errors are associated with completion 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="hasValue" fullname="rx:OnCompleted/hasValue/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns false since no values are associated with completion 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns false since no values are associated with completion 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="kind" fullname="rx:OnCompleted/kind/get" accessLevel="public" isConst="false" isStatic="false" type="int" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns NotificationKind.ON_COMPLETED 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns NotificationKind.ON_COMPLETED 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="value" fullname="rx:OnCompleted/value/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Always returns null since no values are associated with completion 
   ]]></description>
                     <shortDescription><![CDATA[
   Always returns null since no values are associated with completion 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="TimeStamped" type="class" fullname="rx:TimeStamped" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A wrapper that adds a timestamp to a value
  ]]></description>
               <shortDescription><![CDATA[
  A wrapper that adds a timestamp to a value
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="TimeStamped" fullname="rx:TimeStamped/TimeStamped" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a TimeStamped wrapper 
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a TimeStamped wrapper 
   ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="value" type="Object">
                           <description><![CDATA[The value from the original sequence
   ]]></description>
                        </param>
                        <param name="time" type="Number">
                           <description><![CDATA[The timestamp value
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <fields>
                  <field name="timestamp" fullname="rx:TimeStamped/timestamp/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the timestamp value 
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the timestamp value 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="value" fullname="rx:TimeStamped/value/get" accessLevel="public" isConst="false" isStatic="false" type="Object" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the original value 
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the original value 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="rx.flex">
         <classes>
            <asClass name="ObservableResponder" type="class" fullname="rx.flex:ObservableResponder" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.flex" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Concrete implementation of an observable sequence that is also an mx.rpc.IResponder
  ]]></description>
               <shortDescription><![CDATA[
  Concrete implementation of an observable sequence that is also an mx.rpc.IResponder
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="AbsObservable" fullName="rx:AbsObservable" packageName="rx" relativePath="../AbsObservable.html"/>
                     <methods>
                        <method name="aggregate" fullname="rx:AbsObservable/aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:AbsObservable/all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:AbsObservable/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="../rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:AbsObservable/any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:AbsObservable/asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:AbsObservable/average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:AbsObservable/bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:AbsObservable/bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:AbsObservable/cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:AbsObservable/catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:AbsObservable/catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:AbsObservable/combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:AbsObservable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:AbsObservable/contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:AbsObservable/count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:AbsObservable/delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="delayUntil" fullname="rx:AbsObservable/delayUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dt" type="Date"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:AbsObservable/dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:AbsObservable/distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:AbsObservable/doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="nextAction" type="Function"/>
                              <param name="completeAction" type="Function" default="null"/>
                              <param name="errorAction" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:AbsObservable/finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:AbsObservable/first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:AbsObservable/firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:AbsObservable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:AbsObservable/last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:AbsObservable/lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:AbsObservable/let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:AbsObservable/materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:AbsObservable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:AbsObservable/observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:AbsObservable/ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:AbsObservable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:AbsObservable/prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:AbsObservable/pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:AbsObservable/publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:AbsObservable/publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:AbsObservable/removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:AbsObservable/removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:AbsObservable/repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:AbsObservable/replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:AbsObservable/replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:AbsObservable/retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:AbsObservable/sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:AbsObservable/scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:AbsObservable/select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:AbsObservable/selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:AbsObservable/single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:AbsObservable/singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:AbsObservable/skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:AbsObservable/skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:AbsObservable/skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:AbsObservable/skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:AbsObservable/startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="values" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:AbsObservable/subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:AbsObservable/subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:AbsObservable/sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:AbsObservable/take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:AbsObservable/takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:AbsObservable/takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:AbsObservable/takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:AbsObservable/throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:AbsObservable/timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:AbsObservable/timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:AbsObservable/timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:AbsObservable/where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:AbsObservable/zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IObservableResponder" fullName="rx.flex:IObservableResponder" packageName="rx.flex" relativePath="IObservableResponder.html"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ObservableResponder" fullname="rx.flex:ObservableResponder/ObservableResponder" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="valueClass" type="Class"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="fault" fullname="rx.flex:ObservableResponder/fault" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Implementation of mx.rpc.IResponder.fault()
   ]]></description>
                     <shortDescription><![CDATA[
   Implementation of mx.rpc.IResponder.fault()
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="info" type="Object"/>
                     </params>
                  </method>
                  <method name="result" fullname="rx.flex:ObservableResponder/result" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Implementation of mx.rpc.IResponder.result()
   ]]></description>
                     <shortDescription><![CDATA[
   Implementation of mx.rpc.IResponder.result()
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="data" type="Object"/>
                     </params>
                  </method>
                  <method name="subscribeWith" fullname="rx.flex:ObservableResponder/subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling unsubscribe() 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="../IObserver.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="valueClass" fullname="rx.flex:ObservableResponder/valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   The class of the values emitted by this observable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IObservableResponder" type="interface" fullname="rx.flex:IObservableResponder" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.flex" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An observable sequence that is also an mx.rpc.IResponse
  ]]></description>
               <shortDescription><![CDATA[
  An observable sequence that is also an mx.rpc.IResponse
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="ObservableResponder" fullName="rx.flex:ObservableResponder" packageName="rx.flex" relativePath="../flex/ObservableResponder.html"/>
               </implementers>
               <asAncestors>
                  <asAncestor>
                     <classRef name="mx.rpc.IResponder" fullName="mx.rpc.IResponder" relativePath="none"/>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../IObservable.html"/>
                     <fields>
                        <field name="valueClass" fullname="rx:IObservable/rx:IObservable:valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false">
                           <shortDescription><![CDATA[
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="aggregate" fullname="rx:IObservable/rx:IObservable:aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:IObservable/rx:IObservable:all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:IObservable/rx:IObservable:and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="../rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:IObservable/rx:IObservable:any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:IObservable/rx:IObservable:asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:IObservable/rx:IObservable:average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:IObservable/rx:IObservable:bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:IObservable/rx:IObservable:bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:IObservable/rx:IObservable:cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:IObservable/rx:IObservable:catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:IObservable/rx:IObservable:catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:IObservable/rx:IObservable:combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="returnClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:IObservable/rx:IObservable:concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:IObservable/rx:IObservable:contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:IObservable/rx:IObservable:count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:IObservable/rx:IObservable:delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:IObservable/rx:IObservable:dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:IObservable/rx:IObservable:distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:IObservable/rx:IObservable:doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="next" type="Function"/>
                              <param name="complete" type="Function" default="null"/>
                              <param name="error" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:IObservable/rx:IObservable:finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="finallyAction" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:IObservable/rx:IObservable:first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:IObservable/rx:IObservable:firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:IObservable/rx:IObservable:forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:IObservable/rx:IObservable:last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:IObservable/rx:IObservable:lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:IObservable/rx:IObservable:let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:IObservable/rx:IObservable:materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:IObservable/rx:IObservable:merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:IObservable/rx:IObservable:observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:IObservable/rx:IObservable:ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:IObservable/rx:IObservable:onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:IObservable/rx:IObservable:prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:IObservable/rx:IObservable:pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:IObservable/rx:IObservable:publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:IObservable/rx:IObservable:publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:IObservable/rx:IObservable:removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:IObservable/rx:IObservable:removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:IObservable/rx:IObservable:repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:IObservable/rx:IObservable:replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:IObservable/rx:IObservable:replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:IObservable/rx:IObservable:retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:IObservable/rx:IObservable:sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:IObservable/rx:IObservable:scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:IObservable/rx:IObservable:select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:IObservable/rx:IObservable:selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:IObservable/rx:IObservable:single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:IObservable/rx:IObservable:singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:IObservable/rx:IObservable:skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:IObservable/rx:IObservable:skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:IObservable/rx:IObservable:skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:IObservable/rx:IObservable:skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:IObservable/rx:IObservable:startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:IObservable/rx:IObservable:subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:IObservable/rx:IObservable:subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribeWith" fullname="rx:IObservable/rx:IObservable:subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="../rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:IObservable/rx:IObservable:sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:IObservable/rx:IObservable:take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:IObservable/rx:IObservable:takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:IObservable/rx:IObservable:takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:IObservable/rx:IObservable:takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:IObservable/rx:IObservable:throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:IObservable/rx:IObservable:timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:IObservable/rx:IObservable:timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:IObservable/rx:IObservable:timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:IObservable/rx:IObservable:where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:IObservable/rx:IObservable:zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="rx.scheduling">
         <classes>
            <asClass name="GreenThreadScheduler" type="class" fullname="rx.scheduling:GreenThreadScheduler" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.scheduling" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A scheduler that distributes work on a timer, limiting the total execution 
  time per 'switch' to maintain a framerate
  
  <p>Adding more work results in the work taking longer to complete, but the 
  framerate remaining constant</p>
  
  <p>To benefit from GreenThreadScheduler, scheduled actions should execute in 
  this smallest possible time (ie. be designed to be run many times</p>
  ]]></description>
               <shortDescription><![CDATA[
  A scheduler that distributes work on a timer, limiting the total execution 
  time per 'switch' to maintain a framerate
  
  <p>Adding more work results in the work taking longer to complete, but the 
  framerate remaining constant</p>
  
  <p>To benefit from GreenThreadScheduler, scheduled actions should execute in 
  this smallest possible time (ie.]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="IScheduler.html"/>
                     <methods>
                        <method name="schedule" fullname="rx.scheduling:IScheduler/rx.scheduling:IScheduler:schedule" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Schedules a function to be run, either immediately or in the future 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                              <param name="dueTime" type="int" default="0"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="GreenThreadScheduler" fullname="rx.scheduling:GreenThreadScheduler/GreenThreadScheduler" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="contextSwitchObservable" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../IObservable.html"/>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="schedule" fullname="rx.scheduling:GreenThreadScheduler/schedule" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Schedules a function to be run, either immediately or in the future 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Schedules a function to be run, either immediately or in the future 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An ICancelable that will stop the action from being run, if it hasn't already
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to run
   ]]></description>
                        </param>
                        <param name="dueTime" type="int" default="0">
                           <description><![CDATA[The time, in milliseconds, after which action should be executed. If 0, action should be executed at the first available opportunity
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="contextSwitchTime" fullname="rx.scheduling:GreenThreadScheduler/contextSwitchTime/get" accessLevel="public" isConst="false" isStatic="false" type="Number" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   Gets or sets the amount of time, in milliseconds, to allocate to 
   execution on every context 'switch' 
   ]]></description>
                     <shortDescription><![CDATA[
   Gets or sets the amount of time, in milliseconds, to allocate to 
   execution on every context 'switch' 
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="instance" fullname="rx.scheduling:GreenThreadScheduler/instance/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:GreenThreadScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the singleton instance of this scheduler
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the singleton instance of this scheduler
   ]]></shortDescription>
                     <versions/>
                     <classRef name="GreenThreadScheduler" fullName="rx.scheduling:GreenThreadScheduler" packageName="rx.scheduling" relativePath="../scheduling/GreenThreadScheduler.html"/>
                  </field>
                  <field name="now" fullname="rx.scheduling:GreenThreadScheduler/now/get" accessLevel="public" isConst="false" isStatic="false" type="Date" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   Gets the current Date and time
   ]]></description>
                     <shortDescription><![CDATA[
   
   Gets the current Date and time
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IScheduler" type="interface" fullname="rx.scheduling:IScheduler" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.scheduling" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Used to distribute workload
  ]]></description>
               <shortDescription><![CDATA[
  Used to distribute workload
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="ImmediateScheduler" fullName="rx.scheduling:ImmediateScheduler" packageName="rx.scheduling" relativePath="../scheduling/ImmediateScheduler.html"/>
                  <classRef name="GreenThreadScheduler" fullName="rx.scheduling:GreenThreadScheduler" packageName="rx.scheduling" relativePath="../scheduling/GreenThreadScheduler.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="schedule" fullname="rx.scheduling:IScheduler/rx.scheduling:IScheduler:schedule" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Schedules a function to be run, either immediately or in the future 
   ]]></description>
                     <shortDescription><![CDATA[
   Schedules a function to be run, either immediately or in the future 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An ICancelable that will stop the action from being run, if it hasn't already
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to run
   ]]></description>
                        </param>
                        <param name="dueTime" type="int" default="0">
                           <description><![CDATA[The time, in milliseconds, after which action should be executed. If 0, action should be executed at the first available opportunity
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="now" fullname="rx.scheduling:IScheduler/rx.scheduling:IScheduler:now/get" accessLevel="public" isConst="false" isStatic="false" type="Date" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the current Date and time
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the current Date and time
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Scheduler" type="class" fullname="rx.scheduling:Scheduler" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.scheduling" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Provides static helpers to sche
  ]]></description>
               <shortDescription><![CDATA[
  Provides static helpers to sche
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <methods>
                  <method name="scheduleRecursive" fullname="rx.scheduling:Scheduler/scheduleRecursive" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Schedules a recursive action on an IScheduler 
   ]]></description>
                     <shortDescription><![CDATA[
   Schedules a recursive action on an IScheduler 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An ICancelable that can be used to cancel the recursive schedule at any time
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="scheduler" type="rx.scheduling:IScheduler">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="IScheduler.html"/>
                           <description><![CDATA[The scheduler that will schedule each recursive call
   ]]></description>
                        </param>
                        <param name="action" type="Function">
                           <description><![CDATA[The action to call. The action will be called with one argument: a Function that call be called to reschedule the original action
   ]]></description>
                        </param>
                        <param name="dueTime" type="int" default="0">
                           <description><![CDATA[The amount of time to delay the call to ation
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="asynchronous" fullname="rx.scheduling:Scheduler/asynchronous/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:IScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the default asynchronous scheduler
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the default asynchronous scheduler
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                  </field>
                  <field name="defaultScheduler" fullname="rx.scheduling:Scheduler/defaultScheduler/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:IScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the default scheduler
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the default scheduler
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                  </field>
                  <field name="greenThread" fullname="rx.scheduling:Scheduler/greenThread/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:GreenThreadScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the GreenThreadScheduler singleton instance
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the GreenThreadScheduler singleton instance
   ]]></shortDescription>
                     <versions/>
                     <classRef name="GreenThreadScheduler" fullName="rx.scheduling:GreenThreadScheduler" packageName="rx.scheduling" relativePath="../scheduling/GreenThreadScheduler.html"/>
                  </field>
                  <field name="immediate" fullname="rx.scheduling:Scheduler/immediate/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:ImmediateScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the ImmediateScheduler singleton instance
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the ImmediateScheduler singleton instance
   ]]></shortDescription>
                     <versions/>
                     <classRef name="ImmediateScheduler" fullName="rx.scheduling:ImmediateScheduler" packageName="rx.scheduling" relativePath="../scheduling/ImmediateScheduler.html"/>
                  </field>
                  <field name="synchronous" fullname="rx.scheduling:Scheduler/synchronous/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:IScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the default synchronous scheduler
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the default synchronous scheduler
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ImmediateScheduler" type="class" fullname="rx.scheduling:ImmediateScheduler" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.scheduling" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A scheduler that executes actions immediately, or immediately
  after their dueTime (if specified).
  ]]></description>
               <shortDescription><![CDATA[
  A scheduler that executes actions immediately, or immediately
  after their dueTime (if specified).]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="IScheduler.html"/>
                     <methods>
                        <method name="schedule" fullname="rx.scheduling:IScheduler/rx.scheduling:IScheduler:schedule" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Schedules a function to be run, either immediately or in the future 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                              <param name="dueTime" type="int" default="0"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <methods>
                  <method name="schedule" fullname="rx.scheduling:ImmediateScheduler/schedule" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Schedules a function to be run, either immediately or in the future 
   ]]></description>
                     <shortDescription><![CDATA[
   
   Schedules a function to be run, either immediately or in the future 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An ICancelable that will stop the action from being run, if it hasn't already
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="action" type="Function">
                           <description><![CDATA[The function to run
   ]]></description>
                        </param>
                        <param name="dueTime" type="int" default="0">
                           <description><![CDATA[The time, in milliseconds, after which action should be executed. If 0, action should be executed at the first available opportunity
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="instance" fullname="rx.scheduling:ImmediateScheduler/instance/get" accessLevel="public" isConst="false" isStatic="true" type="rx.scheduling:ImmediateScheduler" inheritDoc="false" only="read">
                     <description><![CDATA[
   Gets the singleton instance of this scheduler
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the singleton instance of this scheduler
   ]]></shortDescription>
                     <versions/>
                     <classRef name="ImmediateScheduler" fullName="rx.scheduling:ImmediateScheduler" packageName="rx.scheduling" relativePath="../scheduling/ImmediateScheduler.html"/>
                  </field>
                  <field name="now" fullname="rx.scheduling:ImmediateScheduler/now/get" accessLevel="public" isConst="false" isStatic="false" type="Date" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   Gets the current Date and time
   ]]></description>
                     <shortDescription><![CDATA[
   
   Gets the current Date and time
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="rx.subjects">
         <classes>
            <asClass name="ReplaySubject" type="class" fullname="rx.subjects:ReplaySubject" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.subjects" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="AbsObservable" fullName="rx:AbsObservable" packageName="rx" relativePath="../AbsObservable.html"/>
                     <fields>
                        <field name="valueClass" fullname="rx:AbsObservable/valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="aggregate" fullname="rx:AbsObservable/aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:AbsObservable/all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:AbsObservable/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="../rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:AbsObservable/any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:AbsObservable/asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:AbsObservable/average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:AbsObservable/bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:AbsObservable/bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:AbsObservable/cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:AbsObservable/catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:AbsObservable/catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:AbsObservable/combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:AbsObservable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:AbsObservable/contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:AbsObservable/count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:AbsObservable/delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="delayUntil" fullname="rx:AbsObservable/delayUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dt" type="Date"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:AbsObservable/dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:AbsObservable/distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:AbsObservable/doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="nextAction" type="Function"/>
                              <param name="completeAction" type="Function" default="null"/>
                              <param name="errorAction" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:AbsObservable/finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:AbsObservable/first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:AbsObservable/firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:AbsObservable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:AbsObservable/last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:AbsObservable/lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:AbsObservable/let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:AbsObservable/materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:AbsObservable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:AbsObservable/observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:AbsObservable/ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:AbsObservable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:AbsObservable/prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:AbsObservable/pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:AbsObservable/publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:AbsObservable/publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:AbsObservable/removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:AbsObservable/removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:AbsObservable/repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:AbsObservable/replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:AbsObservable/replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:AbsObservable/retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:AbsObservable/sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:AbsObservable/scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:AbsObservable/select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:AbsObservable/selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:AbsObservable/single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:AbsObservable/singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:AbsObservable/skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:AbsObservable/skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:AbsObservable/skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:AbsObservable/skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:AbsObservable/startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="values" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:AbsObservable/subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:AbsObservable/subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:AbsObservable/sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:AbsObservable/take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:AbsObservable/takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:AbsObservable/takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:AbsObservable/takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:AbsObservable/throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:AbsObservable/timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:AbsObservable/timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:AbsObservable/timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:AbsObservable/where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:AbsObservable/zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="ISubject" fullName="rx:ISubject" packageName="rx" relativePath="../ISubject.html"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ReplaySubject" fullname="rx.subjects:ReplaySubject/ReplaySubject" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="valueClass" type="Class"/>
                        <param name="bufferSize" type="uint" default="0"/>
                        <param name="window" type="uint" default="0"/>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="onCompleted" fullname="rx.subjects:ReplaySubject/onCompleted" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onError" fullname="rx.subjects:ReplaySubject/onError" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="err" type="Error"/>
                     </params>
                  </method>
                  <method name="onNext" fullname="rx.subjects:ReplaySubject/onNext" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="value" type="Object"/>
                     </params>
                  </method>
                  <method name="subscribeWith" fullname="rx.subjects:ReplaySubject/subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="rx:ICancelable">
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="../IObserver.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="ConnectableObservable" type="class" fullname="rx.subjects:ConnectableObservable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.subjects" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Concrete implementation of IConnectableObservable
  ]]></description>
               <shortDescription><![CDATA[
  Concrete implementation of IConnectableObservable
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="AbsObservable" fullName="rx:AbsObservable" packageName="rx" relativePath="../AbsObservable.html"/>
                     <fields>
                        <field name="valueClass" fullname="rx:AbsObservable/valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="aggregate" fullname="rx:AbsObservable/aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:AbsObservable/all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:AbsObservable/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="../rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:AbsObservable/any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:AbsObservable/asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:AbsObservable/average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:AbsObservable/bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:AbsObservable/bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:AbsObservable/cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:AbsObservable/catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:AbsObservable/catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:AbsObservable/combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:AbsObservable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:AbsObservable/contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:AbsObservable/count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:AbsObservable/delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="delayUntil" fullname="rx:AbsObservable/delayUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dt" type="Date"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:AbsObservable/dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:AbsObservable/distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:AbsObservable/doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="nextAction" type="Function"/>
                              <param name="completeAction" type="Function" default="null"/>
                              <param name="errorAction" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:AbsObservable/finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:AbsObservable/first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:AbsObservable/firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:AbsObservable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:AbsObservable/last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:AbsObservable/lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:AbsObservable/let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:AbsObservable/materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:AbsObservable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:AbsObservable/observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:AbsObservable/ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:AbsObservable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:AbsObservable/prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:AbsObservable/pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:AbsObservable/publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:AbsObservable/publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:AbsObservable/removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:AbsObservable/removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:AbsObservable/repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:AbsObservable/replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:AbsObservable/replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:AbsObservable/retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:AbsObservable/sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:AbsObservable/scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:AbsObservable/select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:AbsObservable/selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:AbsObservable/single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:AbsObservable/singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:AbsObservable/skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:AbsObservable/skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:AbsObservable/skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:AbsObservable/skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:AbsObservable/startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="values" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:AbsObservable/subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:AbsObservable/subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:AbsObservable/sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:AbsObservable/take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:AbsObservable/takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:AbsObservable/takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:AbsObservable/takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:AbsObservable/throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:AbsObservable/timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:AbsObservable/timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:AbsObservable/timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:AbsObservable/where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:AbsObservable/zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="IConnectableObservable.html"/>
                     <methods>
                        <method name="connect" fullname="rx.subjects:IConnectableObservable/rx.subjects:IConnectableObservable:connect" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Makes this observable 'hot', so that values will be 
   emitted whether there is a subscriber connected or not.]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                        </method>
                        <method name="refCount" fullname="rx.subjects:IConnectableObservable/rx.subjects:IConnectableObservable:refCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Makes this observable 'hot' when an observer subscribes, and 
   will cancel the source subscription when the last observer unsubscribes
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ConnectableObservable" fullname="rx.subjects:ConnectableObservable/ConnectableObservable" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="source" type="rx:IObservable">
                           <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../IObservable.html"/>
                        </param>
                        <param name="subject" type="rx:ISubject" default="null">
                           <classRef name="ISubject" fullName="rx:ISubject" packageName="rx" relativePath="../ISubject.html"/>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="connect" fullname="rx.subjects:ConnectableObservable/connect" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Makes this observable 'hot', so that values will be 
   emitted whether there is a subscriber connected or not.
   ]]></description>
                     <shortDescription><![CDATA[
   
   Makes this observable 'hot', so that values will be 
   emitted whether there is a subscriber connected or not.]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                  </method>
                  <method name="refCount" fullname="rx.subjects:ConnectableObservable/refCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Makes this observable 'hot' when an observer subscribes, and 
   will cancel the source subscription when the last observer unsubscribes
   ]]></description>
                     <shortDescription><![CDATA[
   
   Makes this observable 'hot' when an observer subscribes, and 
   will cancel the source subscription when the last observer unsubscribes
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                     </result>
                  </method>
                  <method name="subscribeWith" fullname="rx.subjects:ConnectableObservable/subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling unsubscribe() 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="../IObserver.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="AsyncSubject" type="class" fullname="rx.subjects:AsyncSubject" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.subjects" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A subject that replays the last value (or error) received to observers that subscribe 
  after the sequence has completed
  ]]></description>
               <shortDescription><![CDATA[
  A subject that replays the last value (or error) received to observers that subscribe 
  after the sequence has completed
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="AbsObservable" fullName="rx:AbsObservable" packageName="rx" relativePath="../AbsObservable.html"/>
                     <methods>
                        <method name="aggregate" fullname="rx:AbsObservable/aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:AbsObservable/all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:AbsObservable/and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
    
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="../rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:AbsObservable/any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:AbsObservable/asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:AbsObservable/average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:AbsObservable/bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:AbsObservable/bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:AbsObservable/cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:AbsObservable/catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:AbsObservable/catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:AbsObservable/combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:AbsObservable/concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:AbsObservable/contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:AbsObservable/count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:AbsObservable/delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="delayUntil" fullname="rx:AbsObservable/delayUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dt" type="Date"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:AbsObservable/dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:AbsObservable/distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:AbsObservable/doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="nextAction" type="Function"/>
                              <param name="completeAction" type="Function" default="null"/>
                              <param name="errorAction" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:AbsObservable/finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="action" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:AbsObservable/first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:AbsObservable/firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:AbsObservable/forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:AbsObservable/last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:AbsObservable/lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:AbsObservable/let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:AbsObservable/materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:AbsObservable/merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:AbsObservable/observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:AbsObservable/ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:AbsObservable/onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:AbsObservable/prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:AbsObservable/pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:AbsObservable/publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:AbsObservable/publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:AbsObservable/removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:AbsObservable/removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:AbsObservable/repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:AbsObservable/replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:AbsObservable/replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:AbsObservable/retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:AbsObservable/sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:AbsObservable/scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:AbsObservable/select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:AbsObservable/selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:AbsObservable/single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:AbsObservable/singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:AbsObservable/skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:AbsObservable/skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:AbsObservable/skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:AbsObservable/skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:AbsObservable/startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="values" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:AbsObservable/subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:AbsObservable/subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:AbsObservable/sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:AbsObservable/take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:AbsObservable/takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:AbsObservable/takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:AbsObservable/takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:AbsObservable/throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:AbsObservable/timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:AbsObservable/timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:AbsObservable/timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:AbsObservable/where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:AbsObservable/zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="ISubject" fullName="rx:ISubject" packageName="rx" relativePath="../ISubject.html"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="AsyncSubject" fullname="rx.subjects:AsyncSubject/AsyncSubject" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="valueClass" type="Class"/>
                        <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                           <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="lastValue" fullname="rx.subjects:AsyncSubject/lastValue" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Gets the last value received, or throws an IllegalOperationError if no value 
   has been received.
   ]]></description>
                     <shortDescription><![CDATA[
   Gets the last value received, or throws an IllegalOperationError if no value 
   has been received.]]></shortDescription>
                     <versions/>
                     <result type="Object"/>
                  </method>
                  <method name="onCompleted" fullname="rx.subjects:AsyncSubject/onCompleted" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></description>
                     <shortDescription><![CDATA[
   
   Notifies the subscriber that the sequence has completed and 
   that no more messages will be received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onError" fullname="rx.subjects:AsyncSubject/onError" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></description>
                     <shortDescription><![CDATA[
   
   Notifies the subscriber that the sequence has halted with an error 
   and that no more messages will be received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="err" type="Error"/>
                     </params>
                  </method>
                  <method name="onNext" fullname="rx.subjects:AsyncSubject/onNext" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Notifies the subscriber that a value has been received
   ]]></description>
                     <shortDescription><![CDATA[
   
   Notifies the subscriber that a value has been received
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="value" type="Object"/>
                     </params>
                  </method>
                  <method name="subscribeWith" fullname="rx.subjects:AsyncSubject/subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></description>
                     <shortDescription><![CDATA[
   
   
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <![CDATA[An instance of ISubscription that can be used to unsubscribe at anytime by calling unsubscribe() 
   ]]>
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                     <params>
                        <param name="observer" type="rx:IObserver">
                           <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="../IObserver.html"/>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="valueClass" fullname="rx.subjects:AsyncSubject/valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   
   The class of the values emitted by this observable sequence 
   ]]></description>
                     <shortDescription><![CDATA[
   
   
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IConnectableObservable" type="interface" fullname="rx.subjects:IConnectableObservable" accessLevel="public" isFinal="false" isDynamic="false" packageName="rx.subjects" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Represents a 'pending' hot observable. Calling connect will turn the observable 
  into a hot observable. Calling refCount will turn the observable into a hot observable 
  when the first observer subscribes
  ]]></description>
               <shortDescription><![CDATA[
  Represents a 'pending' hot observable.]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="ConnectableObservable" fullName="rx.subjects:ConnectableObservable" packageName="rx.subjects" relativePath="../subjects/ConnectableObservable.html"/>
               </implementers>
               <asAncestors>
                  <asAncestor>
                     <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../IObservable.html"/>
                     <fields>
                        <field name="valueClass" fullname="rx:IObservable/rx:IObservable:valueClass/get" accessLevel="public" isConst="false" isStatic="false" type="Class" inheritDoc="false">
                           <shortDescription><![CDATA[
   The class of the values emitted by this observable sequence 
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="aggregate" fullname="rx:IObservable/rx:IObservable:aggregate" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Runs calculation functions over every value in the source sequence and emits the final result
   <p><a href="http://wiki.github.com/richardszalay/rxas/aggregate">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="all" fullname="rx:IObservable/rx:IObservable:all" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if all values in the source sequence satisfy a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/all">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="and" fullname="rx:IObservable/rx:IObservable:and" accessLevel="public" result_type="rx:Pattern" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[ 
   Creates a pattern by combining the current source with right.]]></shortDescription>
                           <result type="rx:Pattern">
                              <classRef name="Pattern" fullName="rx:Pattern" packageName="rx" relativePath="../rx/Pattern.html"/>
                           </result>
                           <params>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="any" fullname="rx:IObservable/rx:IObservable:any" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a value that satisfies a condition
   <p><a href="http://wiki.github.com/richardszalay/rxas/any">Online Documentation</a></p>
    
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="asObservable" fullname="rx:IObservable/rx:IObservable:asObservable" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Hides the source sequence so it cannot be cast back to it’s concrete implementation  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="average" fullname="rx:IObservable/rx:IObservable:average" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the average value of all the elements in the source sequence  
   <p><a href="http://wiki.github.com/richardszalay/rxas/average">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="bufferWithCount" fullname="rx:IObservable/rx:IObservable:bufferWithCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithCount">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                              <param name="skip" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="bufferWithTime" fullname="rx:IObservable/rx:IObservable:bufferWithTime" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from a source sequence in groups of a specific size  
   <p><a href="http://wiki.github.com/richardszalay/rxas/bufferWithTime">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeMs" type="uint"/>
                              <param name="timeShiftMs" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="cast" fullname="rx:IObservable/rx:IObservable:cast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Forces values from a source sequence to be of a specific valueClass
   <p><a href="http://wiki.github.com/richardszalay/rxas/cast">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="catchError" fullname="rx:IObservable/rx:IObservable:catchError" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchError">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="catchErrorDefer" fullname="rx:IObservable/rx:IObservable:catchErrorDefer" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs a specific sequence, determined at runtime, when an error occurs
   <p><a href="http://wiki.github.com/richardszalay/rxas/catchErrorDefer">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="errorClass" type="Class"/>
                              <param name="deferFunc" type="Function"/>
                           </params>
                        </method>
                        <method name="combineLatest" fullname="rx:IObservable/rx:IObservable:combineLatest" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function, using the latest value from either source 
   <p><a href="http://wiki.github.com/richardszalay/rxas/combineLatest">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="returnClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="concat" fullname="rx:IObservable/rx:IObservable:concat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Concatonates multiple sequences by running each sequence as the previous one finishes
   <p><a href="http://wiki.github.com/richardszalay/rxas/concat">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="Array"/>
                           </params>
                        </method>
                        <method name="contains" fullname="rx:IObservable/rx:IObservable:contains" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Determines if the source sequence contains a specific value 
   <p><a href="http://wiki.github.com/richardszalay/rxas/contains">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Object"/>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="count" fullname="rx:IObservable/rx:IObservable:count" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the number of elements in the source sequence 
   <p><a href="http://wiki.github.com/richardszalay/rxas/count">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="delay" fullname="rx:IObservable/rx:IObservable:delay" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Delays all values in a sequences by a specified time 
   <p><a href="http://wiki.github.com/richardszalay/rxas/delay">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="delayMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="dematerialize" fullname="rx:IObservable/rx:IObservable:dematerialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts materialized values back into messages  
   <p><a href="http://wiki.github.com/richardszalay/rxas/dematerialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="distinctUntilChanged" fullname="rx:IObservable/rx:IObservable:distinctUntilChanged" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out consecutive duplicates from a source sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="comparer" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="doAction" fullname="rx:IObservable/rx:IObservable:doAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Allows custom code to be run when messages arrive without affecting the observer  
   <p><a href="http://wiki.github.com/richardszalay/rxas/doAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="next" type="Function"/>
                              <param name="complete" type="Function" default="null"/>
                              <param name="error" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="finallyAction" fullname="rx:IObservable/rx:IObservable:finallyAction" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Executes a function when the sequence completes or errors
   <p><a href="http://wiki.github.com/richardszalay/rxas/finallyAction">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="finallyAction" type="Function"/>
                           </params>
                        </method>
                        <method name="first" fullname="rx:IObservable/rx:IObservable:first" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/first">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="firstOrDefault" fullname="rx:IObservable/rx:IObservable:firstOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the first value in the sequence, or a default value if the sequence completes with no values
   <p><a href="http://wiki.github.com/richardszalay/rxas/firstOrDefault">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="forkJoin" fullname="rx:IObservable/rx:IObservable:forkJoin" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Combines the current sequence with another, emitting the last values of both after both have completed 
   <p><a href="http://wiki.github.com/richardszalay/rxas/forkJoin">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="resultClass" type="Class"/>
                              <param name="right" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="last" fullname="rx:IObservable/rx:IObservable:last" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or an error if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/last">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="lastOrDefault" fullname="rx:IObservable/rx:IObservable:lastOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the last value in the sequence, or the default value if the sequence completes with no values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/lastOrDefault">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="let" fullname="rx:IObservable/rx:IObservable:let" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Pipes a composed sequence to be mapped through a function so it can be used multiple times 
   <p><a href="http://wiki.github.com/richardszalay/rxas/let">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="func" type="Function"/>
                           </params>
                        </method>
                        <method name="materialize" fullname="rx:IObservable/rx:IObservable:materialize" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Converts all messages (next, complete, error) into values 
   <p><a href="http://wiki.github.com/richardszalay/rxas/materialize">Online Documentation</a></p>
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="merge" fullname="rx:IObservable/rx:IObservable:merge" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the values from multiple sources in the order that they arrive 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="sources" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="observeOn" fullname="rx:IObservable/rx:IObservable:observeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers messages to subscribers through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="ofClass" fullname="rx:IObservable/rx:IObservable:ofClass" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence that are not of a specific valueClass 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="onErrorResumeNext" fullname="rx:IObservable/rx:IObservable:onErrorResumeNext" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes down a list of sequence as each one errors or complete 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="second" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="prune" fullname="rx:IObservable/rx:IObservable:prune" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="pruneAndConnect" fullname="rx:IObservable/rx:IObservable:pruneAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a shared sequence that emits the last value of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="publish" fullname="rx:IObservable/rx:IObservable:publish" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates a connectable sequence that can be shared by multiple observers  
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                        </method>
                        <method name="publishAndConnect" fullname="rx:IObservable/rx:IObservable:publishAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Creates, and immediately connects to, a connectable sequence that can be shared by multiple observers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="removeTimeInterval" fullname="rx:IObservable/rx:IObservable:removeTimeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes time interval information added with timeInterval  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="removeTimestamp" fullname="rx:IObservable/rx:IObservable:removeTimestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes timestamp information added with timestamp  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                           </params>
                        </method>
                        <method name="repeat" fullname="rx:IObservable/rx:IObservable:repeat" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence a specific number of times 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="repeatCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="replay" fullname="rx:IObservable/rx:IObservable:replay" accessLevel="public" result_type="rx.subjects:IConnectableObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers 
   ]]></shortDescription>
                           <result type="rx.subjects:IConnectableObservable">
                              <classRef name="IConnectableObservable" fullName="rx.subjects:IConnectableObservable" packageName="rx.subjects" relativePath="../subjects/IConnectableObservable.html"/>
                           </result>
                           <params>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="replayAndConnect" fullname="rx:IObservable/rx:IObservable:replayAndConnect" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Records the output of the source sequence and replays it to future subscribers
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="selector" type="Function"/>
                              <param name="bufferSize" type="uint" default="0"/>
                              <param name="window" type="uint" default="0"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="retry" fullname="rx:IObservable/rx:IObservable:retry" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Repeats the source sequence when an error occurs 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="retryCount" type="uint" default="0"/>
                           </params>
                        </method>
                        <method name="sample" fullname="rx:IObservable/rx:IObservable:sample" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the latest value on a time interval from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="intervalMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="scan" fullname="rx:IObservable/rx:IObservable:scan" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Runs calculation functions over every value in the source sequence and emits the value as it is calculated 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="accumulator" type="Function"/>
                              <param name="valueClass" type="Class" default="null"/>
                              <param name="initialValue" type="Object" default="null"/>
                           </params>
                        </method>
                        <method name="select" fullname="rx:IObservable/rx:IObservable:select" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Maps the values from a source sequence through a function to change their value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="selectMany" fullname="rx:IObservable/rx:IObservable:selectMany" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Starts a new sequence for every value in the source sequence and merges their values
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                        <method name="single" fullname="rx:IObservable/rx:IObservable:single" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, or an error if any other number of values are emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="singleOrDefault" fullname="rx:IObservable/rx:IObservable:singleOrDefault" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the only item from a source sequence, the default value if no values are emitted, or
   an error if more than one value is emitted.]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="skip" fullname="rx:IObservable/rx:IObservable:skip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the start of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipLast" fullname="rx:IObservable/rx:IObservable:skipLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores a set number of values from the end of the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="skipUntil" fullname="rx:IObservable/rx:IObservable:skipUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a value is received from a specified sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="skipWhile" fullname="rx:IObservable/rx:IObservable:skipWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Ignores values from a source sequence until a condition is no longer met
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="startWith" fullname="rx:IObservable/rx:IObservable:startWith" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Emits the specified values at the start of a sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="value" type="Array"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribe" fullname="rx:IObservable/rx:IObservable:subscribe" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied functions
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribe">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="onNext" type="Function"/>
                              <param name="onComplete" type="Function" default="null"/>
                              <param name="onError" type="Function" default="null"/>
                           </params>
                        </method>
                        <method name="subscribeOn" fullname="rx:IObservable/rx:IObservable:subscribeOn" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Defers subscriptions to the source through a scheduler  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="subscribeWith" fullname="rx:IObservable/rx:IObservable:subscribeWith" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Subscribes to this observable using the supplied observer
   <p><a href="http://wiki.github.com/richardszalay/rxas/subscribeWith">Online Documentation</a></p> 
   ]]></shortDescription>
                           <result type="rx:ICancelable">
                              <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                           </result>
                           <params>
                              <param name="observer" type="rx:IObserver">
                                 <classRef name="IObserver" fullName="rx:IObserver" packageName="rx" relativePath="../rx/IObserver.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="sum" fullname="rx:IObservable/rx:IObservable:sum" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Returns the summed value of all the elements in the source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                        </method>
                        <method name="take" fullname="rx:IObservable/rx:IObservable:take" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the first set number of values from a source sequenc
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeLast" fullname="rx:IObservable/rx:IObservable:takeLast" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes only the last set number of values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="count" type="uint"/>
                           </params>
                        </method>
                        <method name="takeUntil" fullname="rx:IObservable/rx:IObservable:takeUntil" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a value is received from a specified sequence  
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="other" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="takeWhile" fullname="rx:IObservable/rx:IObservable:takeWhile" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Takes values from a source sequence until a condition is no longer met 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="throttle" fullname="rx:IObservable/rx:IObservable:throttle" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Limits how often values from a source sequence will be accepted from a source
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="dueTimeMs" type="uint"/>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeInterval" fullname="rx:IObservable/rx:IObservable:timeInterval" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the amount of time passed since the previous value 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timeout" fullname="rx:IObservable/rx:IObservable:timeout" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Raises an error (or a specified sequence) after a certain period of inactivity 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="timeoutMs" type="uint"/>
                              <param name="other" type="rx:IObservable" default="null">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="timestamp" fullname="rx:IObservable/rx:IObservable:timestamp" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Includes, with every value emitted, the timestamp of when the value was emitted from the source 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="scheduler" type="rx.scheduling:IScheduler" default="null">
                                 <classRef name="IScheduler" fullName="rx.scheduling:IScheduler" packageName="rx.scheduling" relativePath="../scheduling/IScheduler.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="where" fullname="rx:IObservable/rx:IObservable:where" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Filters out values from a source sequence 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="predicate" type="Function"/>
                           </params>
                        </method>
                        <method name="zip" fullname="rx:IObservable/rx:IObservable:zip" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Merges two sequences through a mapping function while only ever using each value once 
   ]]></shortDescription>
                           <result type="rx:IObservable">
                              <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                           </result>
                           <params>
                              <param name="valueClass" type="Class"/>
                              <param name="rightSource" type="rx:IObservable">
                                 <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                              </param>
                              <param name="selector" type="Function"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <methods>
                  <method name="connect" fullname="rx.subjects:IConnectableObservable/rx.subjects:IConnectableObservable:connect" accessLevel="public" result_type="rx:ICancelable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Makes this observable 'hot', so that values will be 
   emitted whether there is a subscriber connected or not.
   ]]></description>
                     <shortDescription><![CDATA[
   Makes this observable 'hot', so that values will be 
   emitted whether there is a subscriber connected or not.]]></shortDescription>
                     <versions/>
                     <result type="rx:ICancelable">
                        <classRef name="ICancelable" fullName="rx:ICancelable" packageName="rx" relativePath="../rx/ICancelable.html"/>
                     </result>
                  </method>
                  <method name="refCount" fullname="rx.subjects:IConnectableObservable/rx.subjects:IConnectableObservable:refCount" accessLevel="public" result_type="rx:IObservable" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Makes this observable 'hot' when an observer subscribes, and 
   will cancel the source subscription when the last observer unsubscribes
   ]]></description>
                     <shortDescription><![CDATA[
   Makes this observable 'hot' when an observer subscribes, and 
   will cancel the source subscription when the last observer unsubscribes
   ]]></shortDescription>
                     <versions/>
                     <result type="rx:IObservable">
                        <classRef name="IObservable" fullName="rx:IObservable" packageName="rx" relativePath="../rx/IObservable.html"/>
                     </result>
                  </method>
               </methods>
            </asClass>
         </classes>
      </asPackage>
   </packages>
</asdoc>