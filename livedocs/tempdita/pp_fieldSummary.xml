<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="raix.interactive"><apiName>raix.interactive</apiName><apiClassifier id="raix.interactive:IGrouping"><apiName>IGrouping</apiName><shortdesc>
	 Contains a list of grouped values and a key identifying the group
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Contains a list of grouped values and a key identifying the group
	 </apiDesc></apiClassifierDetail><apiValue id="raix.interactive:IGrouping:raix.interactive:IGrouping:key:get"><apiName>key</apiName><shortdesc>
		 Returns the key that identifies this grouping
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Returns the key that identifies this grouping
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.interactive:IOrderedEnumerable"><apiName>IOrderedEnumerable</apiName><shortdesc>
	 An enumerable sequence that has ordering applied to it
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An enumerable sequence that has ordering applied to it
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.interactive:IEnumerable"><apiName>IEnumerable</apiName><shortdesc>
	 Represents a collection of values which can be enumerated using foreach, but 
	 does not support random access
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Represents a collection of values which can be enumerated using foreach, but 
	 does not support random access
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.interactive:ILookup"><apiName>ILookup</apiName><shortdesc>
	 Contains values grouped by keys
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Contains values grouped by keys
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.interactive:Enumerable"><apiName>Enumerable</apiName><shortdesc>
	 Provides static methods that create IEnumerable sequences
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides static methods that create IEnumerable sequences
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.interactive:IEnumerator"><apiName>IEnumerator</apiName><shortdesc>
	 Contains the state of an active enumeration.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Contains the state of an active enumeration. This interface is rarely accessed 
	 by client code as IEnumerable sequences can be used with `for each`
	 </apiDesc></apiClassifierDetail><apiValue id="raix.interactive:IEnumerator:raix.interactive:IEnumerator:current:get"><apiName>current</apiName><shortdesc>
		 Returns the current value in the sequence
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Returns the current value in the sequence
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.interactive:AbsEnumerable"><apiName>AbsEnumerable</apiName><shortdesc>
	 An abstract implementation of IEnumerable.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface><apiBaseClassifier>flash.utils:Proxy</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract implementation of IEnumerable. This class may be made inaccessible in future revisions.
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="raix.reactive.flex"><apiName>raix.reactive.flex</apiName><apiClassifier id="raix.reactive.flex:IObservableResponder"><apiName>IObservableResponder</apiName><shortdesc>
	 An observable sequence that is also an mx.rpc.IResponse
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.rpc:IResponder</apiBaseInterface><apiBaseInterface>raix.reactive:IObservable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An observable sequence that is also an mx.rpc.IResponse
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive.flex:ObservableResponder"><apiName>ObservableResponder</apiName><shortdesc>
	 Concrete implementation of an observable sequence that is also an mx.rpc.IResponder
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive.flex:IObservableResponder</apiBaseInterface><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Concrete implementation of an observable sequence that is also an mx.rpc.IResponder
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive.flex:FlexObservable"><apiName>FlexObservable</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="raix.reactive.scheduling"><apiName>raix.reactive.scheduling</apiName><apiClassifier id="raix.reactive.scheduling:GreenThreadScheduler"><apiName>GreenThreadScheduler</apiName><shortdesc>
	 A scheduler that distributes work on a timer, limiting the total execution 
	 time per 'switch' to maintain a framerate
	 
	 Adding more work results in the work taking longer to complete, but the 
	 framerate remaining constant
	 
	 To benefit from GreenThreadScheduler, scheduled actions should execute in 
	 this smallest possible time (ie.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive.scheduling:IScheduler</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A scheduler that distributes work on a timer, limiting the total execution 
	 time per 'switch' to maintain a framerate
	 
	 <p>Adding more work results in the work taking longer to complete, but the 
	 framerate remaining constant</p>
	 
	 <p>To benefit from GreenThreadScheduler, scheduled actions should execute in 
	 this smallest possible time (ie. be designed to be run many times</p>
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive.scheduling:GreenThreadScheduler:contextSwitchTime:get"><apiName>contextSwitchTime</apiName><shortdesc>
		 Gets or sets the amount of time, in milliseconds, to allocate to 
		 execution on every context 'switch' 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Gets or sets the amount of time, in milliseconds, to allocate to 
		 execution on every context 'switch' 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:GreenThreadScheduler:instance:get"><apiName>instance</apiName><shortdesc>
		 Gets the singleton instance of this scheduler
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:GreenThreadScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the singleton instance of this scheduler
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:GreenThreadScheduler:now:get"><apiName>now</apiName><shortdesc>
		 
		 Gets the current Date and time
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Date"/></apiValueDef><apiDesc>
		 
		 Gets the current Date and time
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.scheduling:Scheduler"><apiName>Scheduler</apiName><shortdesc>
	 Provides static helpers to schedulers
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides static helpers to schedulers
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive.scheduling:Scheduler:asynchronous:get"><apiName>asynchronous</apiName><shortdesc>
		 Gets the default asynchronous scheduler
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:IScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the default asynchronous scheduler
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:Scheduler:defaultScheduler:get"><apiName>defaultScheduler</apiName><shortdesc>
		 Gets the default scheduler
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:IScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the default scheduler
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:Scheduler:greenThread:get"><apiName>greenThread</apiName><shortdesc>
		 Gets the GreenThreadScheduler singleton instance
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:GreenThreadScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the GreenThreadScheduler singleton instance
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:Scheduler:immediate:get"><apiName>immediate</apiName><shortdesc>
		 Gets the ImmediateScheduler singleton instance
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:ImmediateScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the ImmediateScheduler singleton instance
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:Scheduler:synchronous:get"><apiName>synchronous</apiName><shortdesc>
		 Gets the default synchronous scheduler
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:IScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the default synchronous scheduler
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.scheduling:IScheduler"><apiName>IScheduler</apiName><shortdesc>
	 Used to distribute workload
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Used to distribute workload
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive.scheduling:IScheduler:raix.reactive.scheduling:IScheduler:now:get"><apiName>now</apiName><shortdesc>
		 Gets the current Date and time
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Date"/></apiValueDef><apiDesc>
		 Gets the current Date and time
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.scheduling:ImmediateScheduler"><apiName>ImmediateScheduler</apiName><shortdesc>
	 A scheduler that executes actions immediately, or immediately
	 after their dueTime (if specified).</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive.scheduling:IScheduler</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A scheduler that executes actions immediately, or immediately
	 after their dueTime (if specified).
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive.scheduling:ImmediateScheduler:instance:get"><apiName>instance</apiName><shortdesc>
		 Gets the singleton instance of this scheduler
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive.scheduling:ImmediateScheduler</apiValueClassifier></apiValueDef><apiDesc>
		 Gets the singleton instance of this scheduler
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive.scheduling:ImmediateScheduler:now:get"><apiName>now</apiName><shortdesc>
		 
		 Gets the current Date and time
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Date"/></apiValueDef><apiDesc>
		 
		 Gets the current Date and time
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="raix.reactive.subjects"><apiName>raix.reactive.subjects</apiName><apiClassifier id="raix.reactive.subjects:ConnectableObservable"><apiName>ConnectableObservable</apiName><shortdesc>
	 Concrete implementation of IConnectableObservable
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive.subjects:IConnectableObservable</apiBaseInterface><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Concrete implementation of IConnectableObservable
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive.subjects:AsyncSubject"><apiName>AsyncSubject</apiName><shortdesc>
	 A subject that replays the last value (or error) received to observers that subscribe 
	 after the sequence has completed
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ISubject</apiBaseInterface><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A subject that replays the last value (or error) received to observers that subscribe 
	 after the sequence has completed
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive.subjects:ReplaySubject"><apiName>ReplaySubject</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ISubject</apiBaseInterface><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive.subjects:IConnectableObservable"><apiName>IConnectableObservable</apiName><shortdesc>
	 Represents a 'pending' hot observable.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:IObservable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Represents a 'pending' hot observable. Calling connect will turn the observable 
	 into a hot observable. Calling refCount will turn the observable into a hot observable 
	 when the first observer subscribes
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="raix.reactive.testing"><apiName>raix.reactive.testing</apiName><apiClassifier id="raix.reactive.testing:Subscription"><apiName>Subscription</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="raix.reactive.testing:Subscription:subscribe"><apiName>subscribe</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="raix.reactive.testing:Subscription:unsubscribe"><apiName>unsubscribe</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.testing:MockObserver"><apiName>MockObserver</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:IObserver</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="raix.reactive.testing:MockObserver:recordedNotifications:get"><apiName>recordedNotifications</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.testing:HotObservable"><apiName>HotObservable</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="raix.reactive.testing:HotObservable:observers:get"><apiName>observers</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue><apiValue id="raix.reactive.testing:HotObservable:subscriptions:get"><apiName>subscriptions</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.testing:TestScheduler"><apiName>TestScheduler</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive.scheduling:IScheduler</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive.testing:TestScheduler:actionCount:get"><apiName>actionCount</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef></apiValueDetail></apiValue><apiValue id="raix.reactive.testing:TestScheduler:now:get"><apiName>now</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Date"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.testing:Recorded"><apiName>Recorded</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="raix.reactive.testing:Recorded:time:get"><apiName>time</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="raix.reactive.testing:Recorded:value:get"><apiName>value</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive:Notification</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive.testing:ColdObservable"><apiName>ColdObservable</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="raix.reactive.testing:ColdObservable:subscriptions:get"><apiName>subscriptions</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="raix.reactive"><apiName>raix.reactive</apiName><apiClassifier id="raix.reactive:MutableCancelable"><apiName>MutableCancelable</apiName><shortdesc>
	A cancelable resource than is not immediately available
	</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	A cancelable resource than is not immediately available
	</apiDesc></apiClassifierDetail><apiValue id="raix.reactive:MutableCancelable:cancelable:set"><apiName>cancelable</apiName><shortdesc>
		 Assigns the cancelable operation.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>raix.reactive:ICancelable</apiValueClassifier></apiValueDef><apiDesc>
		 Assigns the cancelable operation.
		 
		 If an existing value exists for innerCancelable, it will be canceled.
		 
		 If cancel() has already been called on this FutureCancelable, the value 
		 will be instantly canceled and innerCancelable will be null
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:Observer"><apiName>Observer</apiName><shortdesc>
	 Provides static methods that create observers
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides static methods that create observers
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:TimeStamped"><apiName>TimeStamped</apiName><shortdesc>
	 A wrapper that adds a timestamp to a value
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A wrapper that adds a timestamp to a value
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:TimeStamped:timestamp:get"><apiName>timestamp</apiName><shortdesc>
		 Gets the timestamp value 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Gets the timestamp value 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:TimeStamped:value:get"><apiName>value</apiName><shortdesc>
		 Gets the original value 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Gets the original value 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:TimeInterval"><apiName>TimeInterval</apiName><shortdesc>
	 A wrapper that adds the time interval, in milliseconds,
	 since the last values 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A wrapper that adds the time interval, in milliseconds,
	 since the last values 
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:TimeInterval:interval:get"><apiName>interval</apiName><shortdesc>
		 Gets the internal, in milliseconds, 
		 since the last value
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Gets the internal, in milliseconds, 
		 since the last value
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:TimeInterval:value:get"><apiName>value</apiName><shortdesc>
		 Gets the original value
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Gets the original value
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:Unit"><apiName>Unit</apiName><shortdesc>
	 Represents a valueClass that can be used when 
	 an observable sequence logically has no valueClass
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a valueClass that can be used when 
	 an observable sequence logically has no valueClass
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:BooleanCancelable"><apiName>BooleanCancelable</apiName><shortdesc>
	 Represents a cancelable operation, the canceled status of which can 
	 be checked by isCanceled 
	</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a cancelable operation, the canceled status of which can 
	 be checked by isCanceled 
	</apiDesc></apiClassifierDetail><apiValue id="raix.reactive:BooleanCancelable:isCanceled:get"><apiName>isCanceled</apiName><shortdesc>
		 Determines if canceled() has been called on this instance
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Determines if canceled() has been called on this instance
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:IGroupedObservable"><apiName>IGroupedObservable</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:IObservable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef></apiClassifierDetail><apiValue id="raix.reactive:IGroupedObservable:raix.reactive:IGroupedObservable:key:get"><apiName>key</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:OnError"><apiName>OnError</apiName><shortdesc>
	 A Notification for an onError call
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>raix.reactive:Notification</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A Notification for an onError call
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:OnError:error:get"><apiName>error</apiName><shortdesc>
		 Gets the error for this message 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Error"/></apiValueDef><apiDesc>
		 Gets the error for this message 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnError:hasValue:get"><apiName>hasValue</apiName><shortdesc>
		 Always returns false since no values are associated with errors 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Always returns false since no values are associated with errors 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnError:kind:get"><apiName>kind</apiName><shortdesc>
		 Always returns NotificationKind.ON_ERROR 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Always returns NotificationKind.ON_ERROR 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnError:value:get"><apiName>value</apiName><shortdesc>
		 Always returns null since no values are associated with errors 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Always returns null since no values are associated with errors 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:ISubject"><apiName>ISubject</apiName><shortdesc>
	 A resource that is both observable and an observer
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:IObservable</apiBaseInterface><apiBaseInterface>raix.reactive:IObserver</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 A resource that is both observable and an observer
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:OnNext"><apiName>OnNext</apiName><shortdesc>
	 A Notification for an onNext call
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>raix.reactive:Notification</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A Notification for an onNext call
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:OnNext:error:get"><apiName>error</apiName><shortdesc>
		 Always returns false since no errors are associated with values 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Error"/></apiValueDef><apiDesc>
		 Always returns false since no errors are associated with values 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnNext:hasValue:get"><apiName>hasValue</apiName><shortdesc>
		 Always returns true 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Always returns true 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnNext:kind:get"><apiName>kind</apiName><shortdesc>
		 Always returns NotificationKind.ON_NEXT 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Always returns NotificationKind.ON_NEXT 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnNext:value:get"><apiName>value</apiName><shortdesc>
		 Gets the value from the message 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Gets the value from the message 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:TimeoutError"><apiName>TimeoutError</apiName><shortdesc>
	 An error thrown by Observable.timeout by default
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An error thrown by Observable.timeout by default
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:OnCompleted"><apiName>OnCompleted</apiName><shortdesc>
	 A Notification for an onCompleted call
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>raix.reactive:Notification</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A Notification for an onCompleted call
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:OnCompleted:error:get"><apiName>error</apiName><shortdesc>
		 Always returns false since no errors are associated with completion 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Error"/></apiValueDef><apiDesc>
		 Always returns false since no errors are associated with completion 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnCompleted:hasValue:get"><apiName>hasValue</apiName><shortdesc>
		 Always returns false since no values are associated with completion 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Always returns false since no values are associated with completion 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnCompleted:kind:get"><apiName>kind</apiName><shortdesc>
		 Always returns NotificationKind.ON_COMPLETED 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Always returns NotificationKind.ON_COMPLETED 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:OnCompleted:value:get"><apiName>value</apiName><shortdesc>
		 Always returns null since no values are associated with completion 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Always returns null since no values are associated with completion 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:AbsObservable"><apiName>AbsObservable</apiName><shortdesc>
	 Subclass this class only if you want to implement a completely custom IObservable.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:IObservable</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Subclass this class only if you want to implement a completely custom IObservable.
	 
	 <p>If you can avoid it, however, try to stick to subclassing Subject or using 
	 one of the creation methods.</p>
	 
	 <p>This class may be made inaccessible in future revisions</p>
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:CompositeCancelable"><apiName>CompositeCancelable</apiName><shortdesc>
	 Represents a cancelable resource that controls multiple 
	 other cancelable resources 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents a cancelable resource that controls multiple 
	 other cancelable resources 
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:CompositeCancelable:cancelables:get"><apiName>cancelables</apiName><shortdesc>
		 Gets the list of cancelable resources in this instance
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Gets the list of cancelable resources in this instance
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:CompositeCancelable:count:get"><apiName>count</apiName><shortdesc>
		 Gets the number of resources in this list
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
		 Gets the number of resources in this list
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:Subject"><apiName>Subject</apiName><shortdesc>
	 A Subject is both an IObservable and an IObserver, so it can be 
	 returned as an IObservable and fed values through the IObserver 
	 methods.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>raix.reactive:ISubject</apiBaseInterface><apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A Subject is both an IObservable and an IObserver, so it can be 
	 returned as an IObservable and fed values through the IObserver 
	 methods.
	 
	 <p>When returning a Subject as an IObservable, it's recommended that you
	 return subject.asObservable() to hide the original instance</p>
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:Subject:hasSubscriptions:get"><apiName>hasSubscriptions</apiName><shortdesc>
		 Determines whether this subject has any subscriptions
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Determines whether this subject has any subscriptions
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:Subject:subscriptionCount:get"><apiName>subscriptionCount</apiName><shortdesc>
		 Gets the number of subscriptions this subject has
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Gets the number of subscriptions this subject has
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:Cancelable"><apiName>Cancelable</apiName><shortdesc>
	 Provides static methods that create cancelable resources
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides static methods that create cancelable resources
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:Cancelable:empty:get"><apiName>empty</apiName><shortdesc>
		 Returns a cancelable resource that does nothing when canceled
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>raix.reactive:ICancelable</apiValueClassifier></apiValueDef><apiDesc>
		 Returns a cancelable resource that does nothing when canceled
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:IObservable"><apiName>IObservable</apiName><shortdesc>
	 An observable (or "push"), sequence of values that often represent data or events that have not yet occured.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An observable (or "push"), sequence of values that often represent data or events that have not yet occured. 
	 Sequences can be manipulated, often combining them with other sequences, and then subscribed to 
	 to receive the output.
	 
	 Chains of sequences are automatically torn down when the sequence completes, errors or is unsubscribed from.
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:Notification"><apiName>Notification</apiName><shortdesc>
	 Represents one of the three messages that can be sent to 
	 an observer.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Represents one of the three messages that can be sent to 
	 an observer.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:Notification:error:get"><apiName>error</apiName><shortdesc>
		 Gets the error associated with this message or null if there is no error.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Error"/></apiValueDef><apiDesc>
		 Gets the error associated with this message or null if there is no error.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:Notification:hasValue:get"><apiName>hasValue</apiName><shortdesc>
		 Determined whether this instance has a value property available
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Determined whether this instance has a value property available
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:Notification:kind:get"><apiName>kind</apiName><shortdesc>
		 Gets the NotificationKind of this instance
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Gets the NotificationKind of this instance
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:Notification:value:get"><apiName>value</apiName><shortdesc>
		 Gets the value associated with this message
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Gets the value associated with this message
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:Observable"><apiName>Observable</apiName><shortdesc>
	 Provides static methods that create IObservable sequences
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides static methods that create IObservable sequences
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:Observable:maxConcurrentLoaders:get"><apiName>maxConcurrentLoaders</apiName><shortdesc>
		 Gets the maximum number of urlLoaders that can execute concurrently.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
		 Gets the maximum number of urlLoaders that can execute concurrently. The value 
		 defaults to 2 to prevent issues in some browers. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.reactive:ICancelable"><apiName>ICancelable</apiName><shortdesc>
	 Represents a handle that can be used to cancel an operation 
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Represents a handle that can be used to cancel an operation 
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:NotificationKind"><apiName>NotificationKind</apiName><shortdesc>
	 Enumeration for the different types of Notification
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Enumeration for the different types of Notification
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:NotificationKind:ON_COMPLETED"><apiName>ON_COMPLETED</apiName><shortdesc>
		 An onCompleted message
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 An onCompleted message
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="rx.OnCompleted.xml"><linktext>rx.OnCompleted</linktext></link></related-links></apiValue><apiValue id="raix.reactive:NotificationKind:ON_ERROR"><apiName>ON_ERROR</apiName><shortdesc>
		 An onError message
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 An onError message
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="rx.OnError.xml"><linktext>rx.OnError</linktext></link></related-links></apiValue><apiValue id="raix.reactive:NotificationKind:ON_NEXT"><apiName>ON_NEXT</apiName><shortdesc>
		 An onNext (value) message
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
		 An onNext (value) message
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="rx.OnNext.xml"><linktext>rx.OnNext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="raix.reactive:Pattern"><apiName>Pattern</apiName><shortdesc>
	 A combination of multiple IObservable sequences that can be combined 
	 into a Plan
	 
	 Generally, a Pattern will be created using IObservable.and or 
	 Pattern.and(), rather than creating a Pattern directly
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A combination of multiple IObservable sequences that can be combined 
	 into a Plan
	 
	 <p>Generally, a Pattern will be created using IObservable.and or 
	 Pattern.and(), rather than creating a Pattern directly</p>
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:IObserver"><apiName>IObserver</apiName><shortdesc>
	 An object that receives messages from an IObservable sequence
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 An object that receives messages from an IObservable sequence
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="raix.reactive:Plan"><apiName>Plan</apiName><shortdesc>
	 A combination of IObservable sequences and a selector that will 
	 map the values of those sequences to an output value.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A combination of IObservable sequences and a selector that will 
	 map the values of those sequences to an output value. A plan is intended 
	 to be used with Observable.when
	 
	 <p>Generally, a Plan will be created using Pattern.then(), rather 
	 than creating a Plan directly</p>
	 </apiDesc></apiClassifierDetail><apiValue id="raix.reactive:Plan:selector:get"><apiName>selector</apiName><shortdesc>
		 Gets the function selector that will accept one argument for each 
		 sequence in sources and return the output value
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc>
		 Gets the function selector that will accept one argument for each 
		 sequence in sources and return the output value
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.reactive:Plan:sources:get"><apiName>sources</apiName><shortdesc>
		 Gets the observable sequences in this plan
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 Gets the observable sequences in this plan
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="raix.utils"><apiName>raix.utils</apiName><apiClassifier id="raix.utils:Filter"><apiName>Filter</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="raix.utils:Filter:notNull:get"><apiName>notNull</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="raix.utils:Projection"><apiName>Projection</apiName><shortdesc>
	 Contains common projection functions that can be used with IEnumerable.map 
	 and other 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Contains common projection functions that can be used with IEnumerable.map 
	 and other 
	 </apiDesc></apiClassifierDetail><apiValue id="raix.utils:Projection:toLowerCase:get"><apiName>toLowerCase</apiName><shortdesc>
		 Returns a selector function that converts a string to lower case
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc>
		 Returns a selector function that converts a string to lower case
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.utils:Projection:toString:get"><apiName>toString</apiName><shortdesc>
		 Returns a selector function that converts an object to a string
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc>
		 Returns a selector function that converts an object to a string
		 </apiDesc></apiValueDetail></apiValue><apiValue id="raix.utils:Projection:toUpperCase:get"><apiName>toUpperCase</apiName><shortdesc>
		 Returns a selector function that converts a string to upper case
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc>
		 Returns a selector function that converts a string to upper case
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>