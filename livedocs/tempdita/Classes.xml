<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="raix.interactive">
      <apiName>raix.interactive</apiName>
      <apiDetail/>
      <apiClassifier id="raix.interactive:IGrouping">
         <apiName>IGrouping</apiName>
         <shortdesc>
	 Contains a list of grouped values and a key identifying the group
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Contains a list of grouped values and a key identifying the group
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="" invalidHref="IEnumerable.groupBy.xml">
               <linktext>IEnumerable.groupBy</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords" content="IGrouping,raix.interactive.IGrouping,current,key"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.interactive:IOrderedEnumerable">
         <apiName>IOrderedEnumerable</apiName>
         <shortdesc>
	 An enumerable sequence that has ordering applied to it
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 An enumerable sequence that has ordering applied to it
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IOrderedEnumerable,raix.interactive.IOrderedEnumerable,aggregate,all,all,any,any,average,average,cancel,concat,concat,contains,contains,containsKey,count,count,create,defaultIfEmpty,defaultIfEmpty,distinct,distinct,elementAt,elementAt,elementAtOrDefault,elementAtOrDefault,empty,except,except,filter,filter,first,first,firstOrDefault,firstOrDefault,fromArray,fromProxy,generate,getEnumerator,getEnumerator,getValues,groupBy,groupBy,groupJoin,groupJoin,intersect,intersect,join,join,last,last,lastOrDefault,lastOrDefault,map,map,mapMany,mapMany,max,max,min,min,moveNext,nextNameIndex,nextValue,ofType,ofType,orderBy,orderBy,orderByDescending,orderByDescending,range,reduce,reduce,repeat,repeat,repeat,reverse,reverse,scan,scan,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipWhile,skipWhile,sum,sum,take,take,takeLast,takeLast,takeWhile,takeWhile,thenBy,thenByDescending,toArray,toArray,toDictionary,toDictionary,toEnumerable,toLookup,toLookup,toObservable,toObservable,union,union,value,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.interactive:IEnumerable">
         <apiName>IEnumerable</apiName>
         <shortdesc>
	 Represents a collection of values which can be enumerated using foreach, but 
	 does not support random access
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Represents a collection of values which can be enumerated using foreach, but 
	 does not support random access
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IEnumerable,raix.interactive.IEnumerable,aggregate,all,all,any,any,average,average,cancel,concat,concat,contains,contains,containsKey,count,count,create,defaultIfEmpty,defaultIfEmpty,distinct,distinct,elementAt,elementAt,elementAtOrDefault,elementAtOrDefault,empty,except,except,filter,filter,first,first,firstOrDefault,firstOrDefault,fromArray,fromProxy,generate,getEnumerator,getEnumerator,getValues,groupBy,groupBy,groupJoin,groupJoin,intersect,intersect,join,join,last,last,lastOrDefault,lastOrDefault,map,map,mapMany,mapMany,max,max,min,min,moveNext,nextNameIndex,nextValue,ofType,ofType,orderBy,orderBy,orderByDescending,orderByDescending,range,reduce,reduce,repeat,repeat,repeat,reverse,reverse,scan,scan,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipWhile,skipWhile,sum,sum,take,take,takeLast,takeLast,takeWhile,takeWhile,thenBy,thenByDescending,toArray,toArray,toDictionary,toDictionary,toEnumerable,toLookup,toLookup,toObservable,toObservable,union,union,value,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.interactive:ILookup">
         <apiName>ILookup</apiName>
         <shortdesc>
	 Contains values grouped by keys
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Contains values grouped by keys
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="" invalidHref="IEnumerable.toLookup.xml">
               <linktext>IEnumerable.toLookup</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ILookup,raix.interactive.ILookup,aggregate,all,all,any,any,average,average,cancel,concat,concat,contains,contains,containsKey,count,count,create,defaultIfEmpty,defaultIfEmpty,distinct,distinct,elementAt,elementAt,elementAtOrDefault,elementAtOrDefault,empty,except,except,filter,filter,first,first,firstOrDefault,firstOrDefault,fromArray,fromProxy,generate,getEnumerator,getEnumerator,getValues,groupBy,groupBy,groupJoin,groupJoin,intersect,intersect,join,join,last,last,lastOrDefault,lastOrDefault,map,map,mapMany,mapMany,max,max,min,min,moveNext,nextNameIndex,nextValue,ofType,ofType,orderBy,orderBy,orderByDescending,orderByDescending,range,reduce,reduce,repeat,repeat,repeat,reverse,reverse,scan,scan,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipWhile,skipWhile,sum,sum,take,take,takeLast,takeLast,takeWhile,takeWhile,thenBy,thenByDescending,toArray,toArray,toDictionary,toDictionary,toEnumerable,toLookup,toLookup,toObservable,toObservable,union,union,value,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.interactive:Enumerable">
         <apiName>Enumerable</apiName>
         <shortdesc>
	 Provides static methods that create IEnumerable sequences
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Provides static methods that create IEnumerable sequences
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Enumerable,raix.interactive.Enumerable,aggregate,all,all,any,any,average,average,cancel,concat,concat,contains,contains,containsKey,count,count,create,defaultIfEmpty,defaultIfEmpty,distinct,distinct,elementAt,elementAt,elementAtOrDefault,elementAtOrDefault,empty,except,except,filter,filter,first,first,firstOrDefault,firstOrDefault,fromArray,fromProxy,generate,getEnumerator,getEnumerator,getValues,groupBy,groupBy,groupJoin,groupJoin,intersect,intersect,join,join,last,last,lastOrDefault,lastOrDefault,map,map,mapMany,mapMany,max,max,min,min,moveNext,nextNameIndex,nextValue,ofType,ofType,orderBy,orderBy,orderByDescending,orderByDescending,range,reduce,reduce,repeat,repeat,repeat,reverse,reverse,scan,scan,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipWhile,skipWhile,sum,sum,take,take,takeLast,takeLast,takeWhile,takeWhile,thenBy,thenByDescending,toArray,toArray,toDictionary,toDictionary,toEnumerable,toLookup,toLookup,toObservable,toObservable,union,union,value,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.interactive:IEnumerator">
         <apiName>IEnumerator</apiName>
         <shortdesc>
	 Contains the state of an active enumeration.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Contains the state of an active enumeration. This interface is rarely accessed 
	 by client code as IEnumerable sequences can be used with `for each`
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IEnumerator,raix.interactive.IEnumerator,current,key,aggregate,all,all,any,any,average,average,cancel,concat,concat,contains,contains,containsKey,count,count,create,defaultIfEmpty,defaultIfEmpty,distinct,distinct,elementAt,elementAt,elementAtOrDefault,elementAtOrDefault,empty,except,except,filter,filter,first,first,firstOrDefault,firstOrDefault,fromArray,fromProxy,generate,getEnumerator,getEnumerator,getValues,groupBy,groupBy,groupJoin,groupJoin,intersect,intersect,join,join,last,last,lastOrDefault,lastOrDefault,map,map,mapMany,mapMany,max,max,min,min,moveNext,nextNameIndex,nextValue,ofType,ofType,orderBy,orderBy,orderByDescending,orderByDescending,range,reduce,reduce,repeat,repeat,repeat,reverse,reverse,scan,scan,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipWhile,skipWhile,sum,sum,take,take,takeLast,takeLast,takeWhile,takeWhile,thenBy,thenByDescending,toArray,toArray,toDictionary,toDictionary,toEnumerable,toLookup,toLookup,toObservable,toObservable,union,union,value,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.interactive:AbsEnumerable">
         <apiName>AbsEnumerable</apiName>
         <shortdesc>
	 An abstract implementation of IEnumerable.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.interactive:IEnumerable</apiBaseInterface>
               <apiBaseClassifier>flash.utils:Proxy</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract implementation of IEnumerable. This class may be made inaccessible in future revisions.
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="AbsEnumerable,raix.interactive.AbsEnumerable,aggregate,all,all,any,any,average,average,cancel,concat,concat,contains,contains,containsKey,count,count,create,defaultIfEmpty,defaultIfEmpty,distinct,distinct,elementAt,elementAt,elementAtOrDefault,elementAtOrDefault,empty,except,except,filter,filter,first,first,firstOrDefault,firstOrDefault,fromArray,fromProxy,generate,getEnumerator,getEnumerator,getValues,groupBy,groupBy,groupJoin,groupJoin,intersect,intersect,join,join,last,last,lastOrDefault,lastOrDefault,map,map,mapMany,mapMany,max,max,min,min,moveNext,nextNameIndex,nextValue,ofType,ofType,orderBy,orderBy,orderByDescending,orderByDescending,range,reduce,reduce,repeat,repeat,repeat,reverse,reverse,scan,scan,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipWhile,skipWhile,sum,sum,take,take,takeLast,takeLast,takeWhile,takeWhile,thenBy,thenByDescending,toArray,toArray,toDictionary,toDictionary,toEnumerable,toLookup,toLookup,toObservable,toObservable,union,union,value,zip,zip"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="raix.reactive.flex">
      <apiName>raix.reactive.flex</apiName>
      <apiDetail/>
      <apiClassifier id="raix.reactive.flex:IObservableResponder">
         <apiName>IObservableResponder</apiName>
         <shortdesc>
	 An observable sequence that is also an mx.rpc.IResponse
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>mx.rpc:IResponder</apiBaseInterface>
               <apiBaseInterface>raix.reactive:IObservable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 An observable sequence that is also an mx.rpc.IResponse
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IObservableResponder,raix.reactive.flex.IObservableResponder"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.flex:ObservableResponder">
         <apiName>ObservableResponder</apiName>
         <shortdesc>
	 Concrete implementation of an observable sequence that is also an mx.rpc.IResponder
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive.flex:IObservableResponder</apiBaseInterface>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Concrete implementation of an observable sequence that is also an mx.rpc.IResponder
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ObservableResponder,raix.reactive.flex.ObservableResponder,fault,fromAsyncPattern,fromCollection,fromList,fromViewCursor,responder,result,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.flex:FlexObservable">
         <apiName>FlexObservable</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="FlexObservable,raix.reactive.flex.FlexObservable,fault,fromAsyncPattern,fromCollection,fromList,fromViewCursor,responder,result,subscribeWith"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="raix.reactive.scheduling">
      <apiName>raix.reactive.scheduling</apiName>
      <apiDetail/>
      <apiClassifier id="raix.reactive.scheduling:GreenThreadScheduler">
         <apiName>GreenThreadScheduler</apiName>
         <shortdesc>
	 A scheduler that distributes work on a timer, limiting the total execution 
	 time per 'switch' to maintain a framerate
	 
	 Adding more work results in the work taking longer to complete, but the 
	 framerate remaining constant
	 
	 To benefit from GreenThreadScheduler, scheduled actions should execute in 
	 this smallest possible time (ie.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive.scheduling:IScheduler</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A scheduler that distributes work on a timer, limiting the total execution 
	 time per 'switch' to maintain a framerate
	 
	 <p>Adding more work results in the work taking longer to complete, but the 
	 framerate remaining constant</p>
	 
	              <p>To benefit from GreenThreadScheduler, scheduled actions should execute in 
	 this smallest possible time (ie. be designed to be run many times</p>
	           </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="GreenThreadScheduler,raix.reactive.scheduling.GreenThreadScheduler,asynchronous,contextSwitchTime,defaultScheduler,greenThread,immediate,instance,instance,now,now,now,synchronous,schedule,schedule,schedule,scheduleRecursive"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.scheduling:Scheduler">
         <apiName>Scheduler</apiName>
         <shortdesc>
	 Provides static helpers to schedulers
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Provides static helpers to schedulers
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Scheduler,raix.reactive.scheduling.Scheduler,asynchronous,contextSwitchTime,defaultScheduler,greenThread,immediate,instance,instance,now,now,now,synchronous,schedule,schedule,schedule,scheduleRecursive"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.scheduling:IScheduler">
         <apiName>IScheduler</apiName>
         <shortdesc>
	 Used to distribute workload
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Used to distribute workload
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IScheduler,raix.reactive.scheduling.IScheduler,asynchronous,contextSwitchTime,defaultScheduler,greenThread,immediate,instance,instance,now,now,now,synchronous,schedule,schedule,schedule,scheduleRecursive"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.scheduling:ImmediateScheduler">
         <apiName>ImmediateScheduler</apiName>
         <shortdesc>
	 A scheduler that executes actions immediately, or immediately
	 after their dueTime (if specified).</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive.scheduling:IScheduler</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A scheduler that executes actions immediately, or immediately
	 after their dueTime (if specified).
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ImmediateScheduler,raix.reactive.scheduling.ImmediateScheduler,asynchronous,contextSwitchTime,defaultScheduler,greenThread,immediate,instance,instance,now,now,now,synchronous,schedule,schedule,schedule,scheduleRecursive"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="raix.reactive.subjects">
      <apiName>raix.reactive.subjects</apiName>
      <apiDetail/>
      <apiClassifier id="raix.reactive.subjects:ConnectableObservable">
         <apiName>ConnectableObservable</apiName>
         <shortdesc>
	 Concrete implementation of IConnectableObservable
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive.subjects:IConnectableObservable</apiBaseInterface>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Concrete implementation of IConnectableObservable
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ConnectableObservable,raix.reactive.subjects.ConnectableObservable,connect,connect,lastValue,onCompleted,onCompleted,onError,onError,onNext,onNext,refCount,refCount,subscribeWith,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.subjects:AsyncSubject">
         <apiName>AsyncSubject</apiName>
         <shortdesc>
	 A subject that replays the last value (or error) received to observers that subscribe 
	 after the sequence has completed
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ISubject</apiBaseInterface>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A subject that replays the last value (or error) received to observers that subscribe 
	 after the sequence has completed
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="AsyncSubject,raix.reactive.subjects.AsyncSubject,connect,connect,lastValue,onCompleted,onCompleted,onError,onError,onNext,onNext,refCount,refCount,subscribeWith,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.subjects:ReplaySubject">
         <apiName>ReplaySubject</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ISubject</apiBaseInterface>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ReplaySubject,raix.reactive.subjects.ReplaySubject,connect,connect,lastValue,onCompleted,onCompleted,onError,onError,onNext,onNext,refCount,refCount,subscribeWith,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.subjects:IConnectableObservable">
         <apiName>IConnectableObservable</apiName>
         <shortdesc>
	 Represents a 'pending' hot observable.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:IObservable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Represents a 'pending' hot observable. Calling connect will turn the observable 
	 into a hot observable. Calling refCount will turn the observable into a hot observable 
	 when the first observer subscribes
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IConnectableObservable,raix.reactive.subjects.IConnectableObservable,connect,connect,lastValue,onCompleted,onCompleted,onError,onError,onNext,onNext,refCount,refCount,subscribeWith,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="raix.reactive.testing">
      <apiName>raix.reactive.testing</apiName>
      <apiDetail/>
      <apiClassifier id="raix.reactive.testing:Subscription">
         <apiName>Subscription</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Subscription,raix.reactive.testing.Subscription,actionCount,now,observers,recordedNotifications,subscribe,subscriptions,subscriptions,time,unsubscribe,value"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.testing:MockObserver">
         <apiName>MockObserver</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:IObserver</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="MockObserver,raix.reactive.testing.MockObserver,actionCount,now,observers,recordedNotifications,subscribe,subscriptions,subscriptions,time,unsubscribe,value,assertNotifications,assertTimings,assertValues,completed,createColdObservable,createHotObservable,error,hasError,onCompleted,onError,onNext,run,runTo,schedule,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.testing:HotObservable">
         <apiName>HotObservable</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="HotObservable,raix.reactive.testing.HotObservable,actionCount,now,observers,recordedNotifications,subscribe,subscriptions,subscriptions,time,unsubscribe,value,assertNotifications,assertTimings,assertValues,completed,createColdObservable,createHotObservable,error,hasError,onCompleted,onError,onNext,run,runTo,schedule,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.testing:TestScheduler">
         <apiName>TestScheduler</apiName>
         <shortdesc>
	 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive.scheduling:IScheduler</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="TestScheduler,raix.reactive.testing.TestScheduler,actionCount,now,observers,recordedNotifications,subscribe,subscriptions,subscriptions,time,unsubscribe,value,assertNotifications,assertTimings,assertValues,completed,createColdObservable,createHotObservable,error,hasError,onCompleted,onError,onNext,run,runTo,schedule,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.testing:Recorded">
         <apiName>Recorded</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Recorded,raix.reactive.testing.Recorded,actionCount,now,observers,recordedNotifications,subscribe,subscriptions,subscriptions,time,unsubscribe,value"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive.testing:ColdObservable">
         <apiName>ColdObservable</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="ColdObservable,raix.reactive.testing.ColdObservable,actionCount,now,observers,recordedNotifications,subscribe,subscriptions,subscriptions,time,unsubscribe,value,assertNotifications,assertTimings,assertValues,completed,createColdObservable,createHotObservable,error,hasError,onCompleted,onError,onNext,run,runTo,schedule,subscribeWith,subscribeWith"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="raix.reactive">
      <apiName>raix.reactive</apiName>
      <apiDetail/>
      <apiClassifier id="raix.reactive:MutableCancelable">
         <apiName>MutableCancelable</apiName>
         <shortdesc>
	A cancelable resource than is not immediately available
	</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	A cancelable resource than is not immediately available
	</apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="MutableCancelable,raix.reactive.MutableCancelable,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Observer">
         <apiName>Observer</apiName>
         <shortdesc>
	 Provides static methods that create observers
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Provides static methods that create observers
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Observer,raix.reactive.Observer,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:TimeStamped">
         <apiName>TimeStamped</apiName>
         <shortdesc>
	 A wrapper that adds a timestamp to a value
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A wrapper that adds a timestamp to a value
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="TimeStamped,raix.reactive.TimeStamped,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:TimeInterval">
         <apiName>TimeInterval</apiName>
         <shortdesc>
	 A wrapper that adds the time interval, in milliseconds,
	 since the last values 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A wrapper that adds the time interval, in milliseconds,
	 since the last values 
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="TimeInterval,raix.reactive.TimeInterval,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Unit">
         <apiName>Unit</apiName>
         <shortdesc>
	 Represents a valueClass that can be used when 
	 an observable sequence logically has no valueClass
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Represents a valueClass that can be used when 
	 an observable sequence logically has no valueClass
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords" content="Unit,raix.reactive.Unit"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:BooleanCancelable">
         <apiName>BooleanCancelable</apiName>
         <shortdesc>
	 Represents a cancelable operation, the canceled status of which can 
	 be checked by isCanceled 
	</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Represents a cancelable operation, the canceled status of which can 
	 be checked by isCanceled 
	</apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="BooleanCancelable,raix.reactive.BooleanCancelable,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:IGroupedObservable">
         <apiName>IGroupedObservable</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:IObservable</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IGroupedObservable,raix.reactive.IGroupedObservable,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:OnError">
         <apiName>OnError</apiName>
         <shortdesc>
	 A Notification for an onError call
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>raix.reactive:Notification</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A Notification for an onError call
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="OnError,raix.reactive.OnError,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:ISubject">
         <apiName>ISubject</apiName>
         <shortdesc>
	 A resource that is both observable and an observer
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:IObservable</apiBaseInterface>
               <apiBaseInterface>raix.reactive:IObserver</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 A resource that is both observable and an observer
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords" content="ISubject,raix.reactive.ISubject"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:OnNext">
         <apiName>OnNext</apiName>
         <shortdesc>
	 A Notification for an onNext call
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>raix.reactive:Notification</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A Notification for an onNext call
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="OnNext,raix.reactive.OnNext,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:TimeoutError">
         <apiName>TimeoutError</apiName>
         <shortdesc>
	 An error thrown by Observable.timeout by default
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An error thrown by Observable.timeout by default
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords" content="TimeoutError,raix.reactive.TimeoutError"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:OnCompleted">
         <apiName>OnCompleted</apiName>
         <shortdesc>
	 A Notification for an onCompleted call
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>raix.reactive:Notification</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A Notification for an onCompleted call
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="OnCompleted,raix.reactive.OnCompleted,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:AbsObservable">
         <apiName>AbsObservable</apiName>
         <shortdesc>
	 Subclass this class only if you want to implement a completely custom IObservable.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:IObservable</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Subclass this class only if you want to implement a completely custom IObservable.
	 
	 <p>If you can avoid it, however, try to stick to subclassing Subject or using 
	 one of the creation methods.</p>
	 
	              <p>This class may be made inaccessible in future revisions</p>
	           </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="AbsObservable,raix.reactive.AbsObservable,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:CompositeCancelable">
         <apiName>CompositeCancelable</apiName>
         <shortdesc>
	 Represents a cancelable resource that controls multiple 
	 other cancelable resources 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ICancelable</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Represents a cancelable resource that controls multiple 
	 other cancelable resources 
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="CompositeCancelable,raix.reactive.CompositeCancelable,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Subject">
         <apiName>Subject</apiName>
         <shortdesc>
	 A Subject is both an IObservable and an IObserver, so it can be 
	 returned as an IObservable and fed values through the IObserver 
	 methods.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>raix.reactive:ISubject</apiBaseInterface>
               <apiBaseClassifier>raix.reactive:AbsObservable</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A Subject is both an IObservable and an IObserver, so it can be 
	 returned as an IObservable and fed values through the IObserver 
	 methods.
	 
	 <p>When returning a Subject as an IObservable, it's recommended that you
	 return subject.asObservable() to hide the original instance</p>
	           </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Subject,raix.reactive.Subject,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Cancelable">
         <apiName>Cancelable</apiName>
         <shortdesc>
	 Provides static methods that create cancelable resources
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Provides static methods that create cancelable resources
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Cancelable,raix.reactive.Cancelable,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:IObservable">
         <apiName>IObservable</apiName>
         <shortdesc>
	 An observable (or "push"), sequence of values that often represent data or events that have not yet occured.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 An observable (or "push"), sequence of values that often represent data or events that have not yet occured. 
	 Sequences can be manipulated, often combining them with other sequences, and then subscribed to 
	 to receive the output.
	 
	 Chains of sequences are automatically torn down when the sequence completes, errors or is unsubscribed from.
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="IObservable,raix.reactive.IObservable,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Notification">
         <apiName>Notification</apiName>
         <shortdesc>
	 Represents one of the three messages that can be sent to 
	 an observer.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Represents one of the three messages that can be sent to 
	 an observer.
	 
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="" invalidHref="rx.OnNext.xml">
               <linktext>rx.OnNext</linktext>
            </link>
            <link href="" invalidHref="rx.OnCompleted.xml">
               <linktext>rx.OnCompleted</linktext>
            </link>
            <link href="" invalidHref="rx.OnError.xml">
               <linktext>rx.OnError</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="Notification,raix.reactive.Notification,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Observable">
         <apiName>Observable</apiName>
         <shortdesc>
	 Provides static methods that create IObservable sequences
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Provides static methods that create IObservable sequences
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Observable,raix.reactive.Observable,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:ICancelable">
         <apiName>ICancelable</apiName>
         <shortdesc>
	 Represents a handle that can be used to cancel an operation 
	 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Represents a handle that can be used to cancel an operation 
	 
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="" invalidHref="raix.reactive.CompositeCancelable,.xml">
               <linktext>raix.reactive.BooleanCancelable, raix.reactive.FutureCancelable, raix.reactive.Cancelable</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="ICancelable,raix.reactive.ICancelable,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:NotificationKind">
         <apiName>NotificationKind</apiName>
         <shortdesc>
	 Enumeration for the different types of Notification
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Enumeration for the different types of Notification
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="NotificationKind,raix.reactive.NotificationKind,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Pattern">
         <apiName>Pattern</apiName>
         <shortdesc>
	 A combination of multiple IObservable sequences that can be combined 
	 into a Plan
	 
	 Generally, a Pattern will be created using IObservable.and or 
	 Pattern.and(), rather than creating a Pattern directly
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A combination of multiple IObservable sequences that can be combined 
	 into a Plan
	 
	 <p>Generally, a Pattern will be created using IObservable.and or 
	 Pattern.and(), rather than creating a Pattern directly</p>
	           </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Pattern,raix.reactive.Pattern,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:IObserver">
         <apiName>IObserver</apiName>
         <shortdesc>
	 An object that receives messages from an IObservable sequence
	 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 An object that receives messages from an IObservable sequence
	 
	 </apiDesc>
         </apiClassifierDetail>
         <related-links>
            <link href="raix.reactive.xml#Observer">
               <linktext>Observer</linktext>
            </link>
         </related-links>
         <Keywords>
            <meta name="keywords"
                  content="IObserver,raix.reactive.IObserver,accept,accept,accept,accept,acceptWith,add,aggregate,aggregate,all,all,amb,and,and,and,any,any,asObservable,asObservable,average,average,bufferWithCount,bufferWithCount,bufferWithTime,bufferWithTime,bufferWithTimeOrCount,bufferWithTimeOrCount,cancel,cancel,cancel,cancel,cast,cast,catchError,catchError,catchErrorDefer,catchErrorDefer,catchErrors,chain,chain,combineLatest,combineLatest,concat,concat,concat,concatMany,concatMany,contains,contains,count,count,create,create,create,createWithCancelable,defer,delay,delay,delayUntil,dematerialize,dematerialize,distinctUntilChanged,distinctUntilChanged,empty,error,expand,expand,filter,filter,finallyAction,finallyAction,first,first,firstOrDefault,firstOrDefault,forkJoin,forkJoin,forkJoin,fromArray,fromErrorEvent,fromErrorEvents,fromEvent,fromEvents,generate,groupBy,groupBy,groupByUntil,groupByUntil,groupJoin,groupJoin,ifElse,ignoreValues,ignoreValues,interval,join,join,last,last,lastOrDefault,lastOrDefault,let,let,log,log,lookup,map,map,mapMany,mapMany,materialize,materialize,merge,merge,merge,mergeMany,mergeMany,multiWindow,multiWindow,multicast,multicast,multicastDefer,multicastDefer,never,observeOn,observeOn,ofClass,ofClass,onCompleted,onCompleted,onError,onError,onErrorResumeNext,onErrorResumeNext,onErrorResumeNext,onNext,onNext,peek,peek,peekWith,peekWith,prune,prune,pruneDefer,pruneDefer,publish,publish,publishDefer,publishDefer,range,reduce,reduce,remove,removeTimeInterval,removeTimeInterval,removeTimestamp,removeTimestamp,repeat,repeat,repeatValue,replay,replay,replayDefer,replayDefer,retry,retry,sample,sample,scan,scan,select,selectMany,selectMany,sequenceEqual,sequenceEqual,single,single,singleOrDefault,singleOrDefault,skip,skip,skipLast,skipLast,skipUntil,skipUntil,skipWhile,skipWhile,start,startWith,startWith,subscribe,subscribe,subscribeOn,subscribeOn,subscribeWith,subscribeWith,subscribeWith,sum,sum,switchMany,switchMany,take,take,takeLast,takeLast,takeUntil,takeUntil,takeWhile,takeWhile,then,then,then,throttle,throttle,timeInterval,timeInterval,timeout,timeout,timer,timestamp,timestamp,toArray,toArray,toAsync,toObservable,uncaughtErrors,urlLoader,value,when,window,window,windowWithCount,windowWithCount,windowWithTime,windowWithTime,windowWithTimeOrCount,windowWithTimeOrCount,xml,zip,zip"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.reactive:Plan">
         <apiName>Plan</apiName>
         <shortdesc>
	 A combination of IObservable sequences and a selector that will 
	 map the values of those sequences to an output value.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A combination of IObservable sequences and a selector that will 
	 map the values of those sequences to an output value. A plan is intended 
	 to be used with Observable.when
	 
	 <p>Generally, a Plan will be created using Pattern.then(), rather 
	 than creating a Plan directly</p>
	           </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Plan,raix.reactive.Plan,ON_COMPLETED,ON_ERROR,ON_NEXT,cancelable,cancelables,count,empty,error,error,error,error,hasSubscriptions,hasValue,hasValue,hasValue,hasValue,interval,isCanceled,key,kind,kind,kind,kind,maxConcurrentLoaders,selector,sources,subscriptionCount,timestamp,value,value,value,value,value,value"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="raix.utils">
      <apiName>raix.utils</apiName>
      <apiDetail/>
      <apiClassifier id="raix.utils:Filter">
         <apiName>Filter</apiName>
         <shortdesc/>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Filter,raix.utils.Filter,notNull,toLowerCase,toString,toUpperCase,not,property"/>
         </Keywords>
      </apiClassifier>
      <apiClassifier id="raix.utils:Projection">
         <apiName>Projection</apiName>
         <shortdesc>
	 Contains common projection functions that can be used with IEnumerable.map 
	 and other 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Contains common projection functions that can be used with IEnumerable.map 
	 and other 
	 </apiDesc>
         </apiClassifierDetail>
         <Keywords>
            <meta name="keywords"
                  content="Projection,raix.utils.Projection,notNull,toLowerCase,toString,toUpperCase,not,property"/>
         </Keywords>
      </apiClassifier>
   </apiPackage>
</allClasses>